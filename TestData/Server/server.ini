; Note that configuration details are discussed in the document InstallingTheTatinServer.html


home                = '<INIFILE>/'

[CONFIG]
AppName             = 'TatinTests'
DisplayRequests     = 0                     ; 1 makes Rumba display every request in a ⎕ED windows. For debugging only of course.
Folder              = '{home}ServerData'    ; Logs, crash files etc.
LogHTTPToSession    = 1                     ; Naturally only useful in development
MaxNoOfThreads      = 1000
Port                = 443                   ; Note that under Linux for port numbers lower than 1000 root priviliges are required
BaseTagPort         = 0
Secure              = 1
Base                = 'localhost'           ; Port number is added by Tatin in case a non-standard port is used
Title               = 'Tatin Tests'         ; Window title (Browser)
Caption             = 'APLTree Registry'    ; <h1> of HTML pages
TestFlag            = 1                     ; If 1 a couple of commands are available as REST requests
ReloadWS            = 1
HTDOCS              = '{home}'              ; Where static files live (CSS, IMGs...)
Registry            = '{home}Registry/'
;Registry            = 'C:/Users/kai/AppData/Local/Temp/TatinTests/Test_Load_058/reg1'
;Registry            = 'C:/Users/kaiAppData/Local/Temp/Registry_1129'

[HTMLBACKGROUND]
image               = 'background.png'      ; Set this to tatin.png for a test server
color               = ''             	    ; Set this to #FFFFF0 for a production server

[MSG]
Text                = 'This is work in progress; the data shown is a playground and not for serious consumption'
CSS                 = 'font-size: large; font-weight: bold; border: 2px solid silver; padding: 5px 15px; margin: 15px 0; background-color: chocolate;'

[LOGGING]
; Application level (standard log file)
Log                 = 1
LogFolder           = '{home}Logs/'         ; Where does the app log file live?

; The following entries make Rumba log stuff; useful for debugging but not for production 
LogHTTP             = 0
LogConga            = 0
LogRumba            = 0

; The following entry makes Tatin log to the Windows Event Log
WindowsEventLog     = ¯1                    ; ¯1 = Write Start/Stop/Error events to Windows Event Log in Runtime;   1: write   ; 0=never

[CERTIFICATES]                      ; The following settings are ignored in case CONFIG.Secure is 0
PublicCertFile      = '{home}Assets/RunTime/Certificates/myserver-cert.pem'
PrivateKeyFile      = '{home}Assets/RunTime/Certificates/myserver-key.pem'
CertType            = 'DER'

[EVENTS]                            ; These are events send by Rumba to quit ⎕DQ or to broadcasts events ("Pause" and "Continue" when running as a Windows Service)
QuitEvent           = 9876
PauseEvent          = 9877
ContinueEvent       = 9878

[TRAP]
General             = ¯1        ; ¯1: Error trapping in RunTime but not otherwise;   1: Trap;   0: do not trap.   General means "above" Rumba
Rumba               = 0         ; This has an effect only in development. Rumba traps all errors in RunTime in any case.

[APP]                                                  ; Change the following settings according to your needs:
Context             = '#.Tatin.Server'                 ; Where in the workspace does the application live?  (Ideally outside Plodder)
OnStart             = 'OnStart'                        ; Once called when the server starts
;OnHeader           = 'OnHeader'                       ; Especially useful for handling "Expect" with value "100-continue"
OnRequest           = 'OnRequest'                      ; Called in the event of a request. Setting this is mandatory
OnCongaTimeout      = 'OnHouseKeeping'                 ; Do any housekeeping here