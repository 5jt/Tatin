; Notes:
; * You may use "<INIFILE>" in any path in order to refer to the folder this log files lives in.
; * You may use "<TEMP>" in any path in order to refer to the temp folder of the current OS

; We now define local variables that can be referenced in the sections as, say, {foo}
home                = '<INIFILE>/'
temp                = '<TEMP>/Tatin-Test-Server/'

[CONFIG]
AppName             = 'TatinTests'
DisplayRequests     = 0                     ; 1 makes Rumba display every request in a ⎕ED windows. For debugging only of course.
LogHTTPToSession    = 1                     ; Naturally only useful in development
MaxNoOfThreads      = 1000
Port                = 5001                  ; Note that under Linux for port numbers lower than 1000 root priviliges are required
BaseTagPort         = 5001
Secure              = 1
Base                = 'localhost'           ; Port number is added by Tatin in case a non-standard port is used
Title               = 'Tatin Tests (local)'         ; Window title (Browser)
Caption             = 'Tatin Test Server (local)'   ; <h1> of HTML pages
TestFlag            = 1                     ; If 1 a couple of commands are available as REST requests
ReloadWS            = 1
HTDOCS              = '{home}'              ; Where static files live (CSS, IMGs...)
Registry            = '{home}Registry/'
DeletePackages      = 1                     ; 0=not allowed; 1=allowed; 2=only beta versions (major=0);
MinimumTatinVersion = '0.43'                ; Minimum version of Tatin required on the client side (major or major.minor)

[HTMLBACKGROUND]
image               = 'background.png'      ; Set this to tatin.png for a test server
color               = ''             	    ; Set this to #FFFFF0 for a production server

[MSG]
Text                = 'This is the Tatin test case server: it is only started by and for the test cases'
CSS                 = 'font-size: large; font-weight: bold; border: 2px solid silver; padding: 5px 15px; margin: 15px 0; background-color: chocolate;'

[LOGGING]
; Application level (standard log file)
Folder              = '{temp}Logs/'         ; Where does the app log file live?
Log                 = 1

; The following entries make Rumba log stuff; useful for debugging but not for production 
LogHTTP             = 1
LogConga            = 1
LogRumba            = 1

; The following entry makes Tatin log to the Windows Event Log
WindowsEventLog     = ¯1                    ; ¯1 = Write Start/Stop/Error events to Windows Event Log in Runtime;   1: write   ; 0=never

[CERTIFICATES]      ; The following settings are ignored in case CONFIG.Secure is 0
PublicCertFile      = '{home}Assets/Runtime/Certificates/myserver-cert.pem'
PrivateKeyFile      = '{home}Assets/Runtime/Certificates/myserver-key.pem'
CertType            = 'DER'

[EVENTS]            ; These are events send by Rumba to quit ⎕DQ or to broadcasts events ("Pause" and "Continue" when running as a Windows Service)
QuitEvent           = 9876
PauseEvent          = 9877
ContinueEvent       = 9878

[TRAP]
Folder              = '{temp}Errors/'   ; Crash file, HTML report etc.
General             = ¯1                ; ¯1=Error trapping in RunTime but not otherwise; 1=Trap; 0=no traps.  General means "above" Rumba
Rumba               = 0                 ; This has an effect only in development. Rumba traps all errors in RunTime in any case.

[RIDE]
active              = 0
port                = 4502
address             = '*'           
wait                = 1             ; If 1 wait for the user in an endless loop

[APP]                                                  ; Change the following settings according to your needs:
Context             = '#.Tatin.Server'                 ; Where in the workspace does the application live?  (Ideally outside Plodder)
OnStart             = 'OnStart'                        ; Once called when the server starts
;OnHeader           = 'OnHeader'                       ; Especially useful for handling "Expect" with value "100-continue"
OnRequest           = 'OnRequest'                      ; Called in the event of a request. Setting this is mandatory
OnCongaTimeout      = 'OnHouseKeeping'                 ; Do any housekeeping here

[EMAIL]             ; Tatin can send emails in case of crashes, but just under Linux (worked out by the code)
active              = 0                                ; On/off toggle
domain              = 'tatin.dev'                      ; Which domain did the crash occur on
SendFrom            = 'do-not-reply@tatin.dev'         ; Sender of crash emails
SendTo              = ''
SendTo             ,= 'kai@aplteam.com'                ; Receiver of crash emails
SendTo             ,= 'kai@kai-jaeger.de'              ; Receiver of crash emails