 response←request GetPackageList packageID;data;html;noOfVersions;IDs;parms;uniqueIDs;list;list2;list3;descriptionAndProjecturl;list5;mat;group;msg;buff
⍝ Respond to a request for some or all packages, HTML or JSON
 :If Reg.IsValidPackageName packageID
     :If 0<≢group←EstablishGroup packageID
         packageID←group,packageID
     :Else
         msg←'Package ',packageID,' not found'
         :If IsJsonRequest request.Headers
             response←msg Return404 request
         :Else
             response←request RespondWithHTML 404 msg
         :EndIf
         :Return
     :EndIf
 :EndIf
 parms←Reg.CheckParmsForListPackages ⍬
 parms.group←request R.GetQueryParameter'group'
 parms.tags←request R.GetQueryParameter'tags'
 :If 0<≢parms.date←request R.GetQueryParameter'date'
     parms.date←{⊃(//)⎕VFI ⍵}parms.date
     parms.aggregate←0
 :Else
     parms.date←0
     :If 0<≢buff←request R.GetQueryParameter'aggregate'
         parms.aggregate←⊃A.ToNum buff
     :EndIf
 :EndIf
 parms.info_url←request R.GetQueryParameter'info_url'
 :If IsJsonRequest request.Headers
     :If 0=≢data←Reg.ListPackages(G.RegistryPath,'/',packageID)parms
         response←Return404 request
     :Else
         response←request ReturnJSON Reg.JSON data
     :EndIf
 :Else  ⍝ It's a request from a Browser
     list←Reg.GetAllPackages G.RegistryPath
     list2←list Reg.ListPackages(G.RegistryPath,packageID)parms
     list3←Reg.RemoveVersionNumber¨list
     :If 0=≢uniqueIDs←list2[;1]{⍵[(Reg.RemoveVersionNumber¨⍵)⍳⍺]}⌽,list  ⍝ ⌽ them in order to get the latest description
         mat←0 3⍴''
     :Else
         descriptionAndProjecturl←↑Reg.FetchDescriptionAndPackageProjectUrl¨G.RegistryPath∘,¨uniqueIDs
         mat←list2,descriptionAndProjecturl
     :EndIf
     html←packageID PrepareHtmlPageForPackageList mat
     response←request ReturnHTML html
 :EndIf
