 response←SavePackage request;path;filename;path2;packageID;tempFolder;target
⍝ `packageID` is a valid package ID
⍝ `bytes` is a stream of bytes originating from a ZIP file being sent base-64 encoded by the client
⍝ This function saves the data in the appropriate folder which of course must not exist.
 packageID←request.URI
 target←G.RegistryPath,'/',packageID
 :If F.IsDir target
     response←request Respond 400
     response.Content←'The package has already been published'
 :Else
     tempFolder←(739⌶0),'/',packageID
     F.RmDir tempFolder
     ('Could not create folder "',tempFolder,'"')Reg.Assert 1=F.MkDir tempFolder
     filename←tempFolder,'/',packageID,'.zip'
     (Reg.Base64 request.Content)Reg.WriteNativeFile filename
     path←tempFolder,'/data/'
     filename DotNetZip.UnzipTo path
     (F.NormalizePath tempFolder,'/')⎕NMOVE F.NormalizePath path,'\apl-package.json'
     :If F.IsFile path,Reg.DependenciesFilename
         (F.NormalizePath tempFolder,'/')⎕NMOVE F.NormalizePath path,Reg.DependenciesFilename
     :EndIf
     (F.NormalizePath target)⎕NMOVE F.NormalizePath tempFolder
     Reg.Index.Compile G.RegistryPath
     response←request Respond 200
 :EndIf
⍝Done
