 {r}←{quietFlag}UpdateVersionNumber type;version;date;name;buff;build;major;minor;patch;buildID;wsPath
⍝ If either `quietFlag` is 1 or the user answer "yes" when prompted this function does the following:
⍝ 1. It updates the "date" part of the function ##.Registry.Version
⍝ 2. It bumps the build ID, or adds 1 as the build ID
⍝ 3. It takes the following actions dependening on `type`:
⍝    * If `type` ←→ 0 no further action is taken
⍝    * If `type` ←→ 1 the "patch" number is bumped
⍝    * If `type` ←→ 2 the "minor" number is bumped
⍝    * If `type` ←→ 3 the "major" number is bumped
 r←⍬
 quietFlag←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'quietFlag'
 'Invalid right argument; must be one of 0 1 2 3)'⎕SIGNAL 11/⍨1≠+/type≡¨0 1 2 3
 (name version)←2↑##.Registry.Version
 date←10↑##.APLTreeUtils2.FormatDateTime ⎕TS
 :If quietFlag
 :OrIf 1 YesOrNo'Would you like to bump the build ID?'
     :If 3=version+.='.'
         (version buff)←{⍵{((¯1+⍵)↑⍺)(⍵↓⍺)}3⍳⍨+\'.'=⍵}version
         build←⍕1+⊃(//)⎕VFI buff
     :Else
         build←'1'
     :EndIf
     :If '-'∊version
         version←('.',⍕build){(1⊃⍵),⍺,'-',(2⊃⍵)}'-'(≠⊆⊢)version
     :Else
         version,←'.',⍕build
     :EndIf
     'Missing dots in version number'Assert 3=version+.='.'
     'Some bits in the version number are empty when they must not'Assert 0∧.<≢¨'.'(≠⊆⊢)version
     :If 0≠type
         (major minor patch buildID)←{⊃(//)⎕VFI ⍵}¨'.'(≠⊆⊢)version
         :Select ⊃type
         :Case 1
             patch+←1
         :Case 2
             minor+←1
             patch←0
         :Case 3
             major+←1
             minor←patch←0
         :EndSelect
         version←⊃{⍺,'.',⍵}/⍕¨major minor patch buildID
     :EndIf
     Assert' '=1↑0⍴##.Registry.⎕FX'r←Version'('r←''',name,''' ''',version,''' ''',date,'''')
     wsPath←(⍕⎕THIS.##),'.Registry.Version'
     Assert 0<≢⎕SE.acre.SetChanged wsPath
 :EndIf
⍝Done
