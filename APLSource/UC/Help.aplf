 r←level Help Cmd;TC;ref;path
 r←''
 :If 0=⎕SE.⎕NC'_Tatin'
     ⎕SE.UCMD'Tatin.LoadTatin'
 :EndIf
 TC←⎕SE._Tatin.Client
 :Select level
 :Case 0
     :Select ⎕C Cmd
     :Case ⎕C'BuildPackage'
         r,←⊂'Create a new version of a package (resulting in a ZIP) from the directory'
         r,←'' '  ]Tatin.BuildPackage [<package-folder>] [<target-folder>] -dependencies= -version= -tatinVars= -bump=[minor|major|path]'
     :Case ⎕C'CopyRegistry'
         r,←⊂'Copy all latest or specific parts of a Tatin Registry to a folder'
         r,←'' '  ]Tatin.CopyRegistry <[url|alias]> <path> -full -force -latest -group= -list= -dry -verbose=[1|2]'
     :Case ⎕C'CreatePackage'
         r,←⊂'Create a new Tatin package in a given folder'
         r,←'' '  ]Tatin.CreatePackage'
     :Case ⎕C'Debug'
         r,←⊂'Toggle the Tatin debug mode'
         r,←'' '  ]Tatin.Debug <[on|1|off|0]>'
     :Case ⎕C'DeprecatePackage'
         r,←⊂'Declare packages as deprecated'
         r,←'' '  ]Tatin.DeprecatePackage <URL|[Alias><group><name>[<major-version>] <comment> -force'
     :Case ⎕C'FindDependencies'
         r,←⊂'Attempt to find all folder(s) with the given Tatin package(s)'
         r,←'' '  ]Tatin.FindDependencies <comma-separated list of pkgs> [target] -verbose '
     :Case ⎕C'ListLicenses'
         r,←⊂'Returns information regarding the licenses tolerated by a Tatin Server'
         r,←'' '  ]Tatin.ListLicenses <url> -verbose'
     :Case ⎕C'ListRegistries'
         r,←⊂'List Alias, URL, ID, port and priority of all Registries as defined in the user settings'
         r,←'' '  ]Tatin.ListRegistries -full -raw'
     :Case ⎕C'ListDeprecated'
         r,←⊂'List all deprecated major versions'
         r,←'' '  ]Tatin.ListDeprecated <URL|[Alias> -all'
     :Case ⎕C'ListPackages'
         r,←⊂'List all packages in the Registry or install folder passed as argument'
         r,←'' '  ]Tatin.ListPackages <URL|[Alias|<path/to/registry>|<install-folder>]> -uc -group= -tags= -os= -date -project_url -since={YYYYMMDD|YYYY-MM-DD} -noaggr -dependencies'
     :Case ⎕C'LoadPackages'
         r,←⊂'Load the specified package(s) and their dependencies into the workspace'
         r,←'' '  ]Tatin.LoadPackages <packageIDs|package-URLs|Zip-file> [<target namespace>] -nobetas'
     :Case ⎕C'LoadTatin'
         r,←⊂'Load the Tatin client into ⎕SE (if it''s not already there) and initializes it'
         r,←'' '  ]Tatin.LoadTatin'
     :Case ⎕C'InstallPackages'
         r,←⊂'Install the given package(s) and all dependencies into a given folder'
         r,←'' '  ]Tatin. <packageIDs|package-URLs|Zip-file> <install-path>'
     :Case ⎕C'LoadDependencies'
         r,←⊂'Load all packages defined in a file apl-dependencies.txt'
         r,←'' '  ]Tatin.LoadDependencies <package-folder> [<parent-namespace>] -overwrite'
     :Case ⎕C'Maintenance'
         r,←⊂'Check whether there are maintenance files available and asks the user about it'
         r,←'' '  ]Tatin.Maintenance path -dry -show'
     :Case ⎕C'UserSettings'
         r,←⊂'Print the user settings found in the config file to ⎕SE and allow manipulation via flags'
         r,←'' '  ]Tatin.UserSettings -apikey -edit -refresh -home'
     :Case ⎕C'PackageConfig'
         r,←⊂'Manage a package config file: fetch, create, edit or delete it'
         r,←'' '  ]Tatin.PackageConfig <package-URL|package-folder> -edit -delete'
     :Case ⎕C'UnInstallPackages'
         r,←⊂'Uninstall a given package and possibly all its dependencies'
         r,←'' '  ]Tatin.UnInstallPackages [<package-ID|package-alias>] <package-folder> -cleanup -quiet'
     :Case ⎕C'PackageDependencies'
         r,←⊂'Return the contents of a file "apl-dependencies.txt"'
         r,←'' '  ]Tatin.PackageDependencies [package-path] -edit -delete -quiet'
     :Case ⎕C'PublishPackage'
         r,←⊂'Publish a package to a particular Tatin Registry'
         r,←'' '  ]Tatin.PublishPackage <package-folder|ZIP-file> [<Registry-URL|Registry-Alias]> -dependencies='
     :Case ⎕C'ListVersions'
         r,←⊂'List all versions of the given package of a given Registry or all Registries with a priority>0'
         r,←'' '  ]Tatin.ListVersions <[Registry-URL|[Registry-Alias][<group>]-<name>-[<version>] -date'
     :Case ⎕C'Version'
         r,←⊂'Print name, version number and version date of Tatin to the session'
         r,←'' '  ]Tatin.Version [*] -check -all'
     :Case ⎕C'ListTags'
         r,←⊂'List all unique tags as defined in all packages on a Registry, sorted alphabetically'
         r,←'' '  ]Tatin.ListTags [<Registry-URL>] -tags= -os='
     :Case ⎕C'Init'
         r,←⊂'(Re-)Establish the user settings in ⎕SE'
         r,←'' '  ]Tatin.Init [<config-folder>]'
     :Case ⎕C'CheckForLaterVersion'
         r,←⊂'Check whether for the installed packages later versions are available'
         r,←'' '  ]Tatin.CheckForLaterVersion <install-folder> -major -dependencies'
     :Case ⎕C'DeletePackages'
         r,←⊂'Delete a given package (or packages) from a Tatin Registry'
         r,←'' '  ]Tatin.DeletePackages <([Registry-alias|Registry-URL|file://package-folder)package-ID)>'
     :Case ⎕C'GetDeletePolicy'
         r,←⊂'Request which "Delete" policy is operated by a Registry'
         r,←'' '  ]Tatin.GetDeletePolicy [<Registry-URL>|alias|?|*] -check'
     :Case ⎕C'Documentation'
         r,←⊂'Put ',tatinURL,'/v1/documentation into the default browser'
         r,←'' '  ]Tatin.Documentation'
     :Case ⎕C'ReInstallDependencies'
         r,←⊂'ReInstall all packages installed in a folder from scratch'
         r,←'' '  ]Tatin.ReInstallDependencies [install-folder] [Registry-URL|Registry-alias] -force -dry -nobeta -update'
     :Case ⎕C'Ping'
         r,←⊂'Try to contact the specified or all known Tatin Registries'
         r,←'' '  ]Tatin.Ping [Registry-URL]'
     :Case ⎕C'Cache'
         r,←⊂'List the contents of the Tatin package cache'
         r,←'' '  ]Tatin.Cache [url] -path -clear -force'
     :Case ⎕C'UsageData'
         r,←⊂'Make package usage data available'
         r,←'' '  ]Tatin.UsageData [Registry-alias|Registry-URL] -download -all -folder='
     :Case ⎕C'UpdateTatin'
         r,←⊂'Update the Tatin client'
         r,←'' '  ]Tatin.UpdateTatin'
     :Else
         ⎕SHADOW'⎕trap'
         ⎕TRAP←0 'S'
         ∘∘∘ ⍝ New?!
     :EndSelect
     :If 'Version'≢Cmd
         r,←''(']Tatin.',Cmd,' -?? ⍝ Enter this for more information ')
     :EndIf
 :Case 1
     ref←help.level_1
     path←(⍕ref),'.',Cmd  ⍝ for editing the vars
     ('Unkown command: ',Cmd)Assert 2=ref.⎕NC Cmd
     r←ref⍎Cmd
     :If 2=ref.##.level_2.⎕NC Cmd   ⍝ Does it have a -???-help page?!
         r,←''(']',Cmd,' -??? ⍝ Enter this for examples ')
     :EndIf
 :Case 2
     ref←help.level_2
     path←(⍕ref),'.',Cmd  ⍝ for editing the vars
     :If 2=ref.⎕NC Cmd
         r←ref⍎Cmd
     :Else
         r,←⊂'There is no additional help available'
     :EndIf
 :EndSelect
