 r←level Help Cmd;TC
 r←''
 :If 0=⎕SE.⎕NC'_Tatin'
     ⎕SE.UCMD'Tatin.LoadTatin'
 :EndIf
 TC←⎕SE._Tatin.Client
 :Select level
 :Case 0
     :Select ⎕C Cmd
     :Case ⎕C'BuildPackage'
         r,←⊂'Create a new version of a package (resulting in a ZIP) from the directory'
         r,←'' '  ]Tatin.BuildPackage [<package-folder>] [<target-folder>] -dependencies= -version= -tatinVars= -bump=[minor|major|path]'
     :Case ⎕C'CopyRegistry'
         r,←⊂'Copy all latest or specific parts of a Tatin Registry to a folder'
         r,←'' '  ]Tatin.CopyRegistry <[url|alias]> <path> -full -force -latest -group= -list= -dry -verbose=[1|2]'
     :Case ⎕C'CreatePackage'
         r,←⊂'Create a new Tatin package in a given folder'
         r,←'' '  ]Tatin.CreatePackage'
     :Case ⎕C'Debug'
         r,←⊂'Toggle the Tatin debug mode'
         r,←'' '  ]Tatin.Debug <[on|1|off|0]>'
     :Case ⎕C'DeprecatePackage'
         r,←⊂'Declare packages as deprecated'
         r,←'' '  ]Tatin.DeprecatePackage <URL|[Alias><group><name>[<major-version>] <comment> -force'
     :Case ⎕C'FindDependencies'
         r,←⊂'Attempt to find all folder(s) with the given Tatin package(s)'
         r,←'' '  ]Tatin.FindDependencies <comma-separated list of pkgs> [target] -verbose '
     :Case ⎕C'ListLicenses'
         r,←⊂'Returns information regarding the licenses tolerated by a Tatin Server'
         r,←'' '  ]Tatin.ListLicenses <url> -verbose'
     :Case ⎕C'ListRegistries'
         r,←⊂'List Alias, URL, ID, port and priority of all Registries as defined in the user settings'
         r,←'' '  ]Tatin.ListRegistries -full -raw'
     :Case ⎕C'ListDeprecated'
         r,←⊂'List all deprecated major versions'
         r,←'' '  ]Tatin.ListDeprecated <URL|[Alias> -all'
     :Case ⎕C'ListPackages'
         r,←⊂'List all packages in the Registry or install folder passed as argument'
         r,←'' '  ]Tatin.ListPackages <URL|[Alias|<path/to/registry>|<install-folder>]> -uc -group= -tags= -os= -date -project_url -since={YYYYMMDD|YYYY-MM-DD} -noaggr -dependencies'
     :Case ⎕C'LoadPackages'
         r,←⊂'Load the specified package(s) and their dependencies into the workspace'
         r,←'' '  ]Tatin.LoadPackages <packageIDs|package-URLs|Zip-file> [<target namespace>] -nobetas'
     :Case ⎕C'LoadTatin'
         r,←⊂'Load the Tatin client into ⎕SE (if it''s not already there) and initializes it'
         r,←'' '  ]Tatin.LoadTatin'
     :Case ⎕C'InstallPackages'
         r,←⊂'Install the given package(s) and all dependencies into a given folder'
         r,←'' '  ]Tatin. <packageIDs|package-URLs|Zip-file> <install-path>'
     :Case ⎕C'LoadDependencies'
         r,←⊂'Load all packages defined in a file apl-dependencies.txt'
         r,←'' '  ]Tatin.LoadDependencies <package-folder> [<parent-namespace>] -overwrite'
     :Case ⎕C'Maintenance'
         r,←⊂'Check whether there are maintenance files available and asks the user about it'
         r,←'' '  ]Tatin.Maintenance path -dry -show'
     :Case ⎕C'UserSettings'
         r,←⊂'Print the user settings found in the config file to ⎕SE and allow manipulation via flags'
         r,←'' '  ]Tatin.UserSettings -apikey -edit -refresh -home'
     :Case ⎕C'PackageConfig'
         r,←⊂'Manage a package config file: fetch, create, edit or delete it'
         r,←'' '  ]Tatin.PackageConfig <package-URL|package-folder> -edit -delete'
     :Case ⎕C'UnInstallPackages'
         r,←⊂'Uninstall a given package and possibly all its dependencies'
         r,←'' '  ]Tatin.UnInstallPackages [<package-ID|package-alias>] <package-folder> -cleanup -quiet'
     :Case ⎕C'PackageDependencies'
         r,←⊂'Return the contents of a file "apl-dependencies.txt"'
         r,←'' '  ]Tatin.PackageDependencies [package-path] -edit -delete -quiet'
     :Case ⎕C'PublishPackage'
         r,←⊂'Publish a package to a particular Tatin Registry'
         r,←'' '  ]Tatin.PublishPackage <package-folder|ZIP-file> [<Registry-URL|Registry-Alias]> -dependencies='
     :Case ⎕C'ListVersions'
         r,←⊂'List all versions of the given package of a given Registry or all Registries with a priority>0'
         r,←'' '  ]Tatin.ListVersions <[Registry-URL|[Registry-Alias][<group>]-<name>-[<version>] -date'
     :Case ⎕C'Version'
         r,←⊂'Print name, version number and version date of Tatin to the session'
         r,←'' '  ]Tatin.Version [*] -check -all'
     :Case ⎕C'ListTags'
         r,←⊂'List all unique tags as defined in all packages on a Registry, sorted alphabetically'
         r,←'' '  ]Tatin.ListTags [<Registry-URL>] -tags= -os='
     :Case ⎕C'Init'
         r,←⊂'(Re-)Establish the user settings in ⎕SE'
         r,←'' '  ]Tatin.Init [<config-folder>]'
     :Case ⎕C'CheckForLaterVersion'
         r,←⊂'Check whether for the installed packages later versions are available'
         r,←'' '  ]Tatin.CheckForLaterVersion <install-folder> -major -dependencies'
     :Case ⎕C'DeletePackages'
         r,←⊂'Delete a given package (or packages) from a Tatin Registry'
         r,←'' '  ]Tatin.DeletePackages <([Registry-alias|Registry-URL|file://package-folder)package-ID)>'
     :Case ⎕C'GetDeletePolicy'
         r,←⊂'Request which "Delete" policy is operated by a Registry'
         r,←'' '  ]Tatin.GetDeletePolicy [<Registry-URL>|alias|?|*] -check'
     :Case ⎕C'Documentation'
         r,←⊂'Put ',tatinURL,'/v1/documentation into the default browser'
         r,←'' '  ]Tatin.Documentation'
     :Case ⎕C'ReInstallDependencies'
         r,←⊂'ReInstall all packages installed in a folder from scratch'
         r,←'' '  ]Tatin.ReInstallDependencies [install-folder] [Registry-URL|Registry-alias] -force -dry -nobeta -update'
     :Case ⎕C'Ping'
         r,←⊂'Try to contact the specified or all known Tatin Registries'
         r,←'' '  ]Tatin.Ping [Registry-URL]'
     :Case ⎕C'Cache'
         r,←⊂'List the contents of the Tatin package cache'
         r,←'' '  ]Tatin.Cache [url] -path -clear -force'
     :Case ⎕C'UsageData'
         r,←⊂'Make package usage data available'
         r,←'' '  ]Tatin.UsageData [Registry-alias|Registry-URL] -download -all -folder='
     :Case ⎕C'UpdateTatin'
         r,←⊂'Update the Tatin client'
         r,←'' '  ]Tatin.UpdateTatin'
     :Else
         ⎕SHADOW'⎕trap'
         ⎕TRAP←0 'S'
         ∘∘∘ ⍝ New?!
     :EndSelect
     :If 'Version'≢Cmd
         r,←''(']Tatin.',Cmd,' -?? ⍝ Enter this for more information ')
     :EndIf
 :Case 1
     r←⊂{⍵↓⍨+/∧\' '=⍵}{(¯2+≢⍵)⊃⍵}0 Help Cmd
     :Select ⎕C Cmd
     :Case ⎕C'BuildPackage'
         r,←⊂'Creates a ZIP file from the directory ⍵[1] that is a package, and saves it in ⍵[2].'
         r,←⊂'Requires directory ⍵[1] to host a file "',TC.CFG_Name,'" defining the package.'
         r,←⊂'Always bumps the build number except when -version= is specified *and* carries a build number.'
         r,←⊂''
         r,←⊂' * If ⍵[2] is not specified Cider (if available) will be questioned: "distributionFolder"'
         r,←⊂' * If ⍵[1] is not specified it will act on any open Cider project'
         r,←⊂'If BuildPackage makes any assumptions, the user will be asked for confirmation.'
         r,←⊂''
         r,←⊂'-bump=          You can set this to either "patch" or "minor" or "major". The given part of the'
         r,←⊂'                version number is then bumped together with the build number, if any.'
         r,←⊂'                This effects both the package and its config file.'
         r,←⊂'                Note that -bump= and -version= are mutually exclusive.'
         r,←⊂'-version=       Use this to set the version number in both the package project and the package'
         r,←⊂'                that is about to be created. You have two options:'
         r,←⊂'                * -version=1.2.3-beta-2 assigns the given string to "version", but it will'
         r,←⊂'                  preserve any build number and bump it'
         r,←⊂'                * -version=1.2.3-beta-2+123 will replace whatever is saved on "version", including'
         r,←⊂'                  the build number which is not bumped.'
         r,←⊂'                Note that -bump= and -version= are mutually exclusive.'
         r,←⊂'-tatinVars=     Use this to point to the TatinVars namespace.'
         r,←⊂'                If specified TatinVars.CONFIG will be updated.'
         r,←⊂'-dependencies=  Use this to specify a subfolder of the project holding package dependencies.'
         r,←⊂'                Usually there is no need to specify this, refer to the documentation for details:'
         r,←⊂'                the document "Publishing Packages".'
     :Case ⎕C'CopyRegistry'
         r,←⊂'Copy all latest (but deprecated) packages of all major versions from a remote Registry if they are'
         r,←⊂'not already available in the target Registry. With several flags and options you may change the'
         r,←⊂'default behaviour.'
         r,←⊂''
         r,←⊂'-full      Copies ALL (but deprecated) packages (rather than just latest of each major version).'
         r,←⊂'-force     Like the default but copies already available packages again.'
         r,←⊂'-latest    Copies only the highest major version of each (but deprecated) package.'
         r,←⊂'-group=    Restrict the packages to be copied to a particular group.'
         r,←⊂'           Note that dependencies are copied as well, no matter which group they belong to.'
         r,←⊂'-list=      This must be one of:'
         r,←⊂'            * A comma-separated list of packages'
         r,←⊂'            * A file with package names, one per row (specified with the file:// protocol)'
         r,←⊂'            * A variable name (recognized by either `#.` or `⎕SE.` at the beginning)'
         r,←⊂'              Must be either simple (possibly comma-separated) or a vector of simple text vectors.'
         r,←⊂'              Specify consistantly either <group>-<pkgName> or <group>-<pkgName>-<major>'
         r,←⊂'-dry       Lists all packages the user command would copy without actually doing it.'
         r,←⊂'-verbose=  By default the user command prints the names of all successfully copied packages to ⎕SE.'
         r,←⊂'           With -verbose=1 a detailed report forall packages is printed; "Fetched" indicates success.'
         r,←⊂'           With -verbose=2 a message for every package is provided while the list is processed.'
     :Case ⎕C'CreatePackage'
         r,←⊂'This user command is an alias for:'
         r,←⊂']Tatin.PackageConfig -edit'
         r,←⊂'which in turn is an equivalent of creating a package.'
         r,←⊂''
         r,←⊂'The mandatory parameter must be a path to a folder that is going to become a package.'
     :Case ⎕C'Debug'
         r,←⊂'Toggles the Tatin debug mode.'
         r,←⊂''
         r,←⊂'When an argument is provided then it must be one of "on", 1, "off" 0.'
         r,←⊂'"On" and 1 turn the debug mode on, "off" and 0 turn the debug mode off.'
         r,←⊂'In debug mode Tatin does not trap application errors, allowing the user to investigate.'
         r,←⊂'Error guards in dfns, errors when communicating via TCP/IP and similar errors will still be trapped.'
         r,←⊂''
         r,←⊂'If no argument is provided then the current state is reported as "on" or "off".'
     :Case ⎕C'DeprecatePackage'
         r,←⊂'Declares a particular major version of a package or all major versions of a particular'
         r,←⊂'package as deprecated. Requires two arguments:'
         r,←⊂''
         r,←⊂'1. Argument'
         r,←⊂' * If a package ID like "GroupName-PkgName-6 is specified as first argument then a new'
         r,←⊂'   version is published for the major version number 6 that will have a property "deprecated"'
         r,←⊂'   injected into its config file with the value 1.'
         r,←⊂'   It will also have a property "deprecateComment": can carry stuff like "Use xyz instead".'
         r,←⊂' * If a package ID like "GroupName-PkgName is specified then new (deprecated) versions are'
         r,←⊂'   published for all major versions of that package.'
         r,←⊂''
         r,←⊂'2. Argument'
         r,←⊂'A text that will be injected into the package''s config file as "deprecateComment".'
         r,←⊂''
         r,←⊂'-force     By default the user is questioned whether she is sure. With this flag this'
         r,←⊂'           can be overwritten. Mainly for tests.'
     :Case ⎕C'FindDependencies'
         r,←⊂'Scans "target" recursively for a file "apl-dependencies.txt".'
         r,←⊂'"target" can be a folder or a URL or registry alias or [*] for all defined Registries.'
         r,←⊂'Folders with such a file will be scanned for packages defined in "pkgList".'
         r,←⊂'Useful for finding out where one or more packages are used.'
         r,←⊂''
         r,←⊂' * If "target" is embraced by square brackets it is interpreted as a Registry alias'
         r,←⊂' * If it is [*] all defined Registries with a priority greater than 0 are scanned'
         r,←⊂' * If it starts with http[s]:// it is interpreted as a URL pointing to a Registry'
         r,←⊂' * Otherwise "target" is treated as path'
         r,←⊂' * If "target" is not specified it becomes the current dir, but confirmation is required'
         r,←⊂''
         r,←⊂'"pkgList" must be a simple char vector with ","-separated package IDs. The packages'
         r,←⊂'can be specified fully or partly. "Group" and "version" can be left out while "Name" is'
         r,←⊂'mandatory. You may specify a major version but "minor" and "patch" will be ignored.'
         r,←⊂'Note that the sequence of the arguments does not matter.'
         r,←⊂''
         r,←⊂'By default the folder(s)/Registries hosting the package(s) are returned, but that can'
         r,←⊂'be changed by specifying the -verbose flag:'
         r,←⊂''
         r,←⊂'-verbose  By setting this flag you can force the user command to report the actual'
         r,←⊂'          package folder(s) rather than the hosting folder.'
         r,←⊂'          As a side effect the result might be larger, in case a package is installed'
         r,←⊂'          more than once.'
     :Case ⎕C'ListLicenses'
         r,←⊂'Returns a list with all licenses tolerated by a managed Tatin Registry'
         r,←⊂'If no Registry is specified https://tatin.dev is assumed.'
         r,←⊂''
         r,←⊂'-verbose  If specified not only the names of the licenses are returned but also their URLs.'
     :Case ⎕C'ListRegistries'
         r,←⊂'Lists alias, URL, ID, port, priority and the no-caching flag of all Registries as defined'
         r,←⊂'in the user settings.'
         r,←⊂'The result is ordered by priority: the one with the highest priority is listed first etc.'
         r,←⊂'Related used command: ]UserSettings'
         r,←⊂''
         r,←⊂'Notes:'
         r,←⊂' * Registries with a priority of 0 will not participate in a scan of Registries'
         r,←⊂' * In case a Registry does not respond when questioned by ]ListRegistries, the user is'
         r,←⊂'   given three options: retry, skip and cancel the whole operation'
         r,←⊂''
         r,←⊂'-full   By default all data but the API keys are listed. Specify -full if you want the'
         r,←⊂'        API keys to be listed as well.'
         r,←⊂'-raw    Returns just the raw data.'
     :Case ⎕C'ListDeprecated'
         r,←⊂'Lists all deprecated major versions'
         r,←⊂''
         r,←⊂'By default just the major versions would be listed.'
         r,←⊂''
         r,←⊂'-all    By specifying this flag you can force the command to list all versions of all'
         r,←⊂'        deprecated mnajor versions.'
     :Case ⎕C'ListPackages'
         r,←⊂'Lists all packages in the Registry or install folder specified.'
         r,←⊂' * If no argument was specified then the principal Tatin Registry will be assumed (',tatinURL,')'
         r,←⊂' * If "?" is specified the user will be prompted for the Registry if there are multiple'
         r,←⊂' * If "[*]" is specified then ALL registries are questioned.'
         r,←⊂''
         r,←⊂'It does not matter whether you specify / or \ in a path, or whether it has or has not'
         r,←⊂'a trailing separator: Tatin is taking care of that.'
         r,←⊂''
         r,←⊂'In case an install folder was specified (rather than a Registry), flags are ignored and just'
         r,←⊂'two columns are returned: package name and a Boolean indicating principal packages with a 1.'
         r,←⊂''
         r,←⊂'By default all  packages are listed. You can influence the output in several ways:'
         r,←⊂'-group={foo}    List only packages with the given group name.'
         r,←⊂'-dependencies   Add the dependencies of all packages'
         r,←⊂'-tags=foo,goo   List only packages carrying the tags "foo" & "goo".'
         r,←⊂'-uc             List only packages that are user commands'
         r,←⊂'-os=mac         List only packages for the specified operating system(s). Must be a'
         r,←⊂'                comma-separated list with "win", "mac", "lin" being valid values.'
         r,←⊂'-since=         Must be a date (YYYYMMDD or YYYY-MM-DD) when specified.'
         r,←⊂'                List only packages published on that date or later.'
         r,←⊂'                Implies -date and ignores -noaggr.'
         r,←⊂''
         r,←⊂'You can also influence the data returned with the following flags:'
         r,←⊂'-date           Add the publishing date to the output. -noaggr is set to 1 then.'
         r,←⊂'-project_url    Add the URL saved in the package config file to the result.'
         r,←⊂'-noaggr         By default the output is aggregated. -noaggr prevents that.'
         r,←⊂'-dependencies   This adds dependencies to every package, separated by 2 leading spaces.'
         r,←⊂'                When specified -noaggr is set to 1 in order to make sense.'
     :Case ⎕C'LoadPackages'
         r,←⊂'Loads the specified package(s) and all its dependencies into the workspace.'
         r,←⊂''
         r,←⊂'A) First argument:'
         r,←⊂'Specify one or more (comma-separated) packages to be loaded.'
         r,←⊂''
         r,←⊂'B) Second (optional) argument: target namespace (defaults to the current namespace)'
         r,←⊂'Might be # or ⎕SE or a sub-namespace of any level.'
         r,←⊂''
         r,←⊂'-nobetas  By default beta versions are included. Specify -nobetas to suppress them.'
         r,←⊂'-verbose  Let the command report steps along the way.'
         r,←⊂''
         r,←⊂'Returns the number of packages loaded into the workspace, including dependencies.'
         r,←HelpOnPackageID ⍬
     :Case ⎕C'InstallPackages'
         r,←⊂'Installs given package(s) & their dependencies into a given folder.'
         r,←⊂'If the installation folder does not exist it will be created; the user must confirm.'
         r,←⊂'Requires two arguments:'
         r,←⊂''
         r,←⊂'A) First argument:'
         r,←HelpOnPackageID ⍬
         r,←⊂''
         r,←⊂'B) Second argument'
         r,←⊂'The optional second argument must be one of:'
         r,←⊂' * Folder into which the packages will be installed'
         r,←⊂' * "[MyUCMDs]" (case insensitive) with or without specifying a name; the name will'
         r,←⊂'   be derived from the package ID if none was specified'
         r,←⊂' * A Cider alias specifying a project'
         r,←⊂''
         r,←⊂'If more than one user command package is specified after [MyUCMDs], an error is thrown.'
         r,←⊂'If no second argument is specified, Tatin tries to find an open Cider project.'
         r,←⊂'If there is just one open, Tatin acts on it, otherwise the user is questioned.'
         r,←⊂'It then inspects the "dependencies" & "dependencies_dev" properties.'
         r,←⊂'If that defines just one folder Tatin acts on it.'
         r,←⊂'If there are multiple folders defined, the user is questioned which one to install into.'
         r,←⊂''
         r,←⊂'-nobetas: By default beta versions are included. Specify -nobetas to suppress them.'
     :Case ⎕C'LoadDependencies'
         r,←⊂'Loads all packages defined in a file apl-dependencies.txt.'
         r,←⊂''
         r,←⊂'Takes up to two arguments:'
         r,←⊂' [1] A folder into which one or more packages have been installed'
         r,←⊂' [2] Optional: a namespace into which the packages are going to be loaded'
         r,←⊂'     Default is the current namespace except when "folder" is [MyUCMDs] when the default'
         r,←⊂'     is ⎕SE instead.'
         r,←⊂''
         r,←⊂'-overwrite:        By default a package is not loaded if it already exists. You can'
         r,←⊂'                   enforce the load operation by specifying the -overwrite flag.'
         r,←⊂'-makeHomeRelative  By default the paths returned by HOME and GetFullPath2AssetsFolder'
         r,←⊂'                   are absolute. By specifying this you can enforce them to be'
         r,←⊂'                   relative: only the package folder and its parent are returned.'
     :Case ⎕C'LoadTatin'
         r,←⊂'Loads the Tatin client into ⎕SE (if it''s not already there) and initializes it.'
         r,←⊂'As a side effect the Tatin API becomes available in ⎕SE.'
         r,←⊂''
         r,←⊂'By default the user config file is expected in the user''s home folder, and it will be'
         r,←⊂'created there if it does not already exist.'
         r,←⊂'You may specify a different folder. Note that by default this is NOT a permanent change;'
         r,←⊂''
         r,←⊂'-permanent   Make any changes permanent'
         r,←⊂'-force       Enforce the load even if ⎕SE.Tatin already exists'
     :Case ⎕C'Maintenance'
         r,←⊂'Checks whether there are any files in the folder Maintenance/. These are expected to be'
         r,←⊂'.aplf files (functions). Such files will be listed, and the user can select which one(s)'
         r,←⊂'to execute. They will be fed with the argument provided, which is expected to be a folder.'
         r,←⊂'That folder and all its sub folders will be scanned for packages, and every package will'
         r,←⊂'be potentially changed by the maintenance file(s) selected by the user.'
         r,←⊂'Usually this means changing the package config file.'
         r,←⊂''
         r,←⊂'This mechanism can be used to, say, rename properties, or inject new ones. The purpose'
         r,←⊂'is to ensure that all packages are up to date.'
         r,←⊂''
         r,←⊂'-dry   When specified all actions will be listed, including a list of all packages found,'
         r,←⊂'       but no package will actually be changed at all.'
         r,←⊂'-show  Shows the leading comments of all maintenance files that would be executed.'
         r,←⊂'       If this is specified no other action is taken.'
         r,←⊂''
         r,←⊂'Note that this is NOT about packages that are managed by a Tatin server. The server has'
         r,←⊂'its own mechanism for updating packages.'
     :Case ⎕C'UserSettings'
         r,←⊂'Prints the user settings found in the config file to the session in JSON format.'
         r,←⊂'By default the API key is replaced by asterisks; specify -apikey to overwrite this.'
         r,←⊂''
         r,←⊂'If you want to investigate the current user settings (rather than the file contents)'
         r,←⊂'please use the API.'
         r,←⊂''
         r,←⊂'-edit    If you want to change the file you can add -edit in order to get the data into'
         r,←⊂'         the editor and make changes. In this case the API key will always show.'
         r,←⊂'         If you did change the data, you will first be prompted for saving the changes on'
         r,←⊂'         disk and then for refreshing the current user settings.'
         r,←⊂'-refresh If you did change the user settings from another APL session, or by editing the'
         r,←⊂'         file, you can refresh the current user settings with -refresh.'
         r,←⊂'-home    This lets the user command print the folder the user settings are saved in to ⎕SE.'
         r,←⊂'         If this is specified everything else is ignored.'
     :Case ⎕C'PackageConfig'
         r,←⊂'Manages a package config file: fetch, create, edit or delete it.'
         r,←⊂'The argument, if specified, must be either a URL or a path.'
         r,←⊂' * In case of a URL the contents of the config file is printed to the session (JSON).'
         r,←⊂'   Specifying any of the flags has no effect then.'
         r,←⊂' * In case it is a path it must point to a folder that contains a Tatin package.'
         r,←⊂'   The contents "',TC.CFG_Name,'" in that folder is printed to the session (JSON).'
         r,←⊂'   In case the file does not yet exist it will be created.'
         r,←⊂''
         r,←⊂'In case no argument is specified Tatin checks whether there are any open Cider projects.'
         r,←⊂'If there is just one open it will act on it, if there are multiple projects open the user'
         r,←⊂'will be asked which one she wants to act on.'
         r,←⊂''
         r,←⊂'If Cider is not available or no project is open the command tries to find a package'
         r,←⊂'config file in the current directory, but the user is asked for confirmation.'
         r,←⊂''
         r,←⊂'-edit    You may edit the file by specifying the -edit flag.'
         r,←⊂'         Note that since version 0.104.0 Tatin updates the workspace with the new version.'
         r,←⊂'-delete  Use this to delete the file.'
     :Case ⎕C'UnInstallPackages'
         r,←⊂'UnInstalls a given package and its dependencies if those are neither top-level packages nor'
         r,←⊂'required by other packages. Superfluous packages (like outdated versions) are removed as well.'
         r,←⊂'If you don''t want to delete a specific package but get rid of all superfluous packages'
         r,←⊂'then don''t specify a package ID but -cleanup.'
         r,←⊂''
         r,←⊂'Requires at least one argument which must be one of:'
         r,←⊂' * A folder in conjunction with -cleanup flag'
         r,←⊂' * A package ID; this works only in conjunction with the Cider project manager,'
         r,←⊂'   since Tatin will work out the folder by looking at any open Cider projects.'
         r,←⊂' * A "?"; Tatin will then present all top-level packages for selection.'
         r,←⊂'Two arguments must be  [package-ID|alias|?] and a folder.'
         r,←⊂''
         r,←⊂'In case the first argument is a package ID it must be one of:'
         r,←⊂'   * Package ID '
         r,←⊂'   * Alias and fully qualified name of a package'
         r,←⊂'   * Just an alias; postfix with a "@" in order to mark it as alias'
         r,←⊂'A package ID might be fully qualified or <group>-<name>.'
         r,←⊂''
         r,←⊂'If a second argument is specified it must be one of:'
         r,←⊂' * Path to a folder with installed packages'
         r,←⊂'   If this is not an absolute path then it must be a sub folder of an open Cider project.'
         r,←⊂'   Then Tatin works out the correct one.'
         r,←⊂' * The symbolic name [MyUCMDs] (case independent).'
         r,←⊂' * A Cider alias in square brackets, identifying a project'
     :Case ⎕C'PackageDependencies'
         r,←⊂'Returns the contents of a file "apl-dependencies.txt".'
         r,←⊂'Takes a path hosting such a file as an argument. If no path is provided it acts on open Cider'
         r,←⊂'projects. If there is more than one opne, the user is questioned.'
         r,←⊂''
         r,←⊂'-edit   You may edit the file by specifying the -edit flag.'
         r,←⊂'        In case the file does not already exist it is created.'
         r,←⊂''
         r,←⊂'        After an edit operation the data is checked for being complete and syntactically'
         r,←⊂'        correct JSON and then saved to the given folder.'
         r,←⊂''
         r,←⊂'-delete In case you want to delete the file specify the -delete flag.'
         r,←⊂''
         r,←⊂'-force  Prevents the user from being interrogated. Mostly useful for test cases.'
     :Case ⎕C'PublishPackage'
         r,←⊂'Publishes a package to a particular Tatin Registry.'
         r,←⊂'Such a package can be one of:'
         r,←⊂' * ZIP file, typically created by calling ]Tatin.BuildPackage'
         r,←⊂' * Folder that contains everything that defines a package; in this case the required ZIP is'
         r,←⊂'   created by "PublishPackage" itself.'
         r,←⊂''
         r,←⊂'Requires up to two arguments:'
         r,←⊂' * Path to ZIP file or package folder'
         r,←⊂' * URL or alias of a Registry or a "?" (you may or may not embrace the "?" with [])'
         r,←⊂'   In case this is not specified the principal Registry is assumed.'
         r,←⊂''
         r,←⊂'If the path to the ZIP file is not specified, Tatin asks Cider for any open projects.'
         r,←⊂'A single one open is taken. If there are multiple ones, it let the user choose one.'
         r,←⊂'Cider knows where to find a ZIP file.'
         r,←⊂''
         r,←⊂'The name of the resulting package is extracted from the ZIP file which therefore must conform'
         r,←⊂'to the Tatin rules.'
         r,←⊂''
         r,←⊂'Tatin checks the "delete" policy of the Registry. If the server operates a none-delete policy,'
         r,←⊂'the user must confirm that she really wants to publish to that particular Registry.'
         r,←⊂''
         r,←⊂'-dependencies=: Use this to specify a subfolder of the project that hosts the packages the package'
         r,←⊂'                about to be published depends on. Usually there is no need to specify this; refer'
         r,←⊂'                to the documentation ("Publishing Packages") for details.'
     :Case ⎕C'ListVersions'
         r,←⊂'Lists all versions of the given package.'
         r,←⊂''
         r,←⊂' You may specify a package in several ways:'
         r,←⊂' * ]Tatin.ListVersions [Registry-URL|Registry-alias]{group}-{package}'
         r,←⊂' * ]Tatin.ListVersions [Registry-URL|Registry-alias]{package}'
         r,←⊂' * ]Tatin.ListVersions {package}'
         r,←⊂' * ]Tatin.ListVersions {package}-{major}'
         r,←⊂' * ]Tatin.ListVersions {package}-{major}.{minor}'
         r,←⊂'In all these cases a list of packages is returned, possibly empty.'
         r,←⊂'Note that case does not matter.'
         r,←⊂''
         r,←⊂'If no Registry is specified all Registries with a priority greater than 0 are scanned.'
         r,←⊂'Finally you may specify a ? (or [?]): then you will be prompted with a list of all known'
         r,←⊂'Registries for selecting one.'
         r,←⊂''
         r,←⊂'If just a package is specified, a matrix with two columns is returned:'
         r,←⊂' [;1] The Registry'
         r,←⊂' [;2] Full package ID'
         r,←⊂''
         r,←⊂'Lacking a group does not make a difference if the package exists only in one group anyway.'
         r,←⊂'If it exists in more than one group then all of them are listed.'
         r,←⊂''
         r,←⊂'If version precedence cannot be established from the version numbers alone (often a problem'
         r,←⊂'with beta versions) then the publishing date is taken into account.'
         r,←⊂''
         r,←⊂'-date : adds the publishing date to the report.'
     :Case ⎕C'Version'
         r,←⊂''
         r,←⊂' * Specify a URL or an alias if you are after the version number of a particular Tatin Registry'
         r,←⊂' * Specify "*" for all version numbers of the client and all known Tatin Registries; see also -all'
         r,←⊂' * Specify -all for all version numbers of the client and all known Tatin Registries; see also *'
         r,←⊂' * Specify "?" if you want to be prompted with a list of all available Tatin Registries'
         r,←⊂''
         r,←⊂'If you want to compare the version you are using locally with what is used on the principal'
         r,←⊂'Tatin Registry then specify the -check flag. Any argument is then ignored.'
     :Case ⎕C'ListTags'
         r,←⊂'Lists all unique tags as defined in all packages of a Registry, sorted alphabetically.'
         r,←⊂'If no argument was specified then the principal Tatin Registry will be assumed (',tatinURL,').'
         r,←⊂'If a "?" is passed as argument, the user will be prompted for the Registry, except when there'
         r,←⊂'is just one defined anyway.'
         r,←⊂''
         r,←⊂'-tags=   You may specify one or more tags like -tags=foo,goo'
         r,←⊂'         In that case all tags are listed from packages that carry both "foo" & "goo".'
         r,←⊂'-os=     You may specify one or more operating systems as a comma-separated vector.'
         r,←⊂'         Only "lin", "mac" and "win" are valid.'
         r,←⊂'For details how tags are search refer to the documentation.'
     :Case ⎕C'Init'
         r,←⊂'(Re-)Establishes the user settings in ⎕SE. Call this in case the user settings got changed on'
         r,←⊂'file and you want to incorporate the changes in the current session.'
         r,←⊂''
         r,←⊂'Without an argument, Init processes the default user settings file.'
         r,←⊂'Instead you may specify a folder that contains a file tatin-client.json.'
     :Case ⎕C'CheckForLaterVersion'
         r,←⊂'Checks whether later versions of the installed packages are available.'
         r,←⊂'Takes a folder that hosts a file "apl-buildlist.json" as argument.'
         r,←⊂'Scans all known Registries with a priority greater than 0 for later versions.'
         r,←⊂''
         r,←⊂'Returns a matrix with five columns for all packages found:'
         r,←⊂' [;1] Currently installed package ID'
         r,←⊂' [;2] package ID of the latest version found or something like "no response" or "not found"'
         r,←⊂' [;3] URL of the Registry the package was originally installed from'
         r,←⊂' [;4] ! for a later version'
         r,←⊂' [;5] URL of the Registry hosting a different (usually later) version; might be empty'
         r,←⊂''
         r,←⊂'It will also report Registries that were not scanned because their priority is 0.'
         r,←⊂''
         r,←⊂'In order to update use ]Tatin.ReInstallDependencies'
         r,←⊂'However, this will NOT update to a new major version. New major versions need installing.'
         r,←⊂''
         r,←⊂'-major        By default later MAJOR versions are ignored, but this default behaviour can be'
         r,←⊂'              changed by specifying -major: then only later major versions are reported.'
         r,←⊂''
         r,←⊂'-dependencies By default only principal packages are checked.'
         r,←⊂'              You may include dependencies by specifying this flag.'
     :Case ⎕C'DeletePackages'
         r,←⊂'Deletes one or more versions of a package.'
         r,←⊂''
         r,←⊂'Takes one of:'
         r,←⊂' * URL specifying a Tatin Registry, followed by a package ID'
         r,←⊂' * [alias] specifying a Tatin Registry, followed by a package ID'
         r,←⊂' * Folder hosting a package; must start with file://'
         r,←⊂'   The folder must contain a file apl-package.json, otherwise an error is thrown'
         r,←⊂''
         r,←⊂'Notes:'
         r,←⊂' * DeletePackages acts on ALL packages, including deprecated ones'
         r,←⊂' * If no group name is specified and the package name is used in more than one group the'
         r,←⊂'   user will be asked from which group the package shall be deleted'
         r,←⊂' * If no or an incomplete version number is specified, the user will be presented with a'
         r,←⊂'   list of package IDs, with the possibility to delete several or even all of them'
     :Case ⎕C'GetDeletePolicy'
         r,←⊂'Requests which "Delete" policy is operated by a Registry.'
         r,←⊂'You may specify one of the following as argument:'
         r,←⊂' None         = Act on the principal Tatin registry'
         r,←⊂' ?            = Present a list with all defined Registries for selection'
         r,←⊂' *            = Act on all defined Registries'
         r,←⊂' [foo]        = Act on the Registry with the alias "foo"'
         r,←⊂' https://...  = Act on the given URL'
         r,←⊂''
         r,←⊂'Returns one of "None", "Any", "JustBetas":'
         r,←⊂' * "None" means a package, once published, cannot be deleted'
         r,←⊂' * "Any" means any package can be deleted'
         r,←⊂' * "JustBetas" means that only beta versions can be deleted'
         r,←⊂' * "*** Server did not respond" might be returned for obvious reasons'
         r,←⊂''
         r,←⊂'Note that Tatin interrogates a Registry for its delete policy just once. It'
         r,←⊂'then saves the results on a variable for better performance. This can be a problem is case the'
         r,←⊂'policy of a server got changed, most likely your own one. To overcome this specify the -check'
         r,←⊂'flag which will result in the servers being asked again rather than trusting former results.'
     :Case ⎕C'Documentation'
         r,←⊂'Put ',tatinURL,'/v1/documentation into the default browser'
     :Case ⎕C'ReInstallDependencies'
         r,←⊂'ReInstalls all packages (principal ones as well as dependencies) from scratch.'
         r,←⊂'Takes a folder as argument. If specified, the folder must host a file apl-dependencies.txt.'
         r,←⊂'Instead of an absolute path you might specify a sub folder of an open Cider project.'
         r,←⊂'Then Tatin works out which project to act on:'
         r,←⊂' * If there is just one project open it is taken'
         r,←⊂' * If there are multiple Cider projects open the user is questioned'
         r,←⊂' * If Cider is not available or no projects are open, the current directory is checked'
         r,←⊂'For a relative path the user is always asked for confirmation.'
         r,←⊂''
         r,←⊂'All installed packages are removed from the folder (except ZIP files) before a new build'
         r,←⊂'list is compiled and used to install the packages from scratch.'
         r,←⊂''
         r,←⊂'Notes:'
         r,←⊂' * This does not install a later version (but check on -update).'
         r,←⊂' * ZIP files are not removed upfront and have therefore a higher priority,'
         r,←⊂'   so when the dependency list refers to a ZIP file then it will always survive.'
         r,←⊂''
         r,←⊂'All defined Registries with a priority greater than 0 are scanned for principal packages,'
         r,←⊂'but one can specify a particular Registry as second (optional) argument.'
         r,←⊂'For dependencies, all Registries with a priority greater than 0 are scanned in any case.'
         r,←⊂''
         r,←⊂'-force   Prevents user confirmation and reporting to the session, including establishing'
         r,←⊂'         a project in case no folder was specified.'
         r,←⊂'-dry     Reports what would have been done without actually doing it.'
         r,←⊂'-nobetas By default betas are included; suppress with -nobetas.'
         r,←⊂'-update  By default ReInstallDependencies does not install later versions.'
         r,←⊂'         You may change this by specifying this flag.'
     :Case ⎕C'Ping'
         r,←⊂'Tries to contact one or more Tatin Registries.'
         r,←⊂''
         r,←⊂' * Optionally you may specify a Registry URL as an argument.'
         r,←⊂' * You can also specify just a "?"; then a list with all known Registries will be provided.'
         r,←⊂'   You may then select one or more of them.'
         r,←⊂' * If no argument is provided then all defined Registries are contacted.'
         r,←⊂' * In case the path to a folder is passed as ⍵ a 1 is returned in case the folder exists.'
         r,←⊂''
         r,←⊂'In any case a matrix with two columns is returned:'
         r,←⊂' [;1] is the Registry URL'
         r,←⊂' [;2] is a Boolean, a 1 means that the Registry responded'
     :Case ⎕C'Cache'
         r,←⊂'Lists all packages of all URLs saved in the Tatin package cache.'
         r,←⊂''
         r,←⊂'One may specify a URL as argument; then only packages of that URL are listed.'
         r,←⊂''
         r,←⊂'-path  By default just domain names and package names are returned. By specifying this'
         r,←⊂'       option you can force it to return full paths instead.'
         r,←⊂'-clear Lists all cached packages and then asks for confirmation before removing them.'
         r,←⊂'       If confirmed all packages are removed or, if an argument (URL) was specified,'
         r,←⊂'       all packages of that URL.'
         r,←⊂'-force Ignored in case -clear was not specified as well. Prevents the user from being'
         r,←⊂'       interrogated regarding clearing the cache. Mainly for test cases.'
     :Case ⎕C'UsageData'
         r,←⊂'Use this to deal with usage data of a Tatin Registry.'
         r,←⊂'If no argument is specified then the user will be prompted for the Registry,'
         r,←⊂'except when there is just one defined anyway.'
         r,←⊂'If no option is specified all available files will be listed.'
         r,←⊂''
         r,←⊂'If only a URL (or Registry alias) is specified, a list with all downloadable files is printed.'
         r,←⊂''
         r,←⊂'-download Use this flag to indicate that you wish to download one or more files.'
         r,←⊂'          A list with all files available for download will be presented to you together'
         r,←⊂'          with the additional options "all" and "quit". You may then select none, one,'
         r,←⊂'          several or all files for download or cancel the operation.'
         r,←⊂'          The folder holding the file(s) is printed together with a list of all files.'
         r,←⊂'-folder=  By default downloaded files will be saved in a sub folder of your OS''s temp'
         r,←⊂'          folder which is printed to the session. You may override this by specifying a folder.'
         r,←⊂'          If you do, it must be an empty folder. Ignored when -download is not specified.'
         r,←⊂'-unzip    Specify this if you want Tatin to unzip the downloaded file(s).'
         r,←⊂'          The ZIP files will be deleted afterwards. Ignored when -download is not specified.'
         r,←⊂'-all      This circumvents the selection dialog; mainly useful for test cases.'
     :Case ⎕C'UpdateTatin'
         r,←⊂'Downloads the latest version from GitHub and installs it into the folder it was started from'
         r,←⊂'in case there is a later version available.'
         r,←⊂''
         r,←⊂'Note that this user command does not attempt to update the current workspace, therefore it'
         r,←⊂'is required to close the current session and start a new one.'
     :Else
         r←'Unknown command: ',Cmd
     :EndSelect
     :If (⊂⎕C Cmd)∊⎕C¨'CopyRegistry' 'LoadPackages' 'InstallPackages' 'DeletePackages' 'ReInstallDependencies' 'Ping'
     :AndIf (⎕C∊r)≢⎕C'Unknown command: ',Cmd
         r,←''(']',Cmd,' -??? ⍝ Enter this for examples ')
     :EndIf
 :Case 2
     :Select ⎕C Cmd
     :Case ⎕C'CopyRegistry'
         r,←⊂'Examples'
         r,←⊂'--------'
         r,←⊂'⍝ Note: deprecated packages are NEVER copied'
         r,←⊂']CopyRegistry /path/2/Reg'
         r,←⊂'  Copies the latest version of all packages from [tatin] if not already available'
         r,←⊂']CopyRegistry [company-reg] /path/2/Reg -latest'
         r,←⊂'  Copies the latest version of the highest major version of all packages from [company-reg]'
         r,←⊂']CopyRegistry /path/2/Reg -full -force'
         r,←⊂'  Copies all packages from [tatin] no matter what'
         r,←⊂']CopyRegistry /path/2/Reg group=aplteam -force -full'
         r,←⊂'  Copies all packages of the group "aplteam" from [tatin] no matter what'
         r,←⊂'#.MyVars←''aplteam-FilesAndDirs,aplteam-APLTreeUtils2'''
         r,←⊂']CopyRegistry /path/2/Reg -list=#.MyVars -full'
         r,←⊂'  Copies all packages from [tatin] if not already available'
         r,←⊂']CopyRegistry /path/2/Reg -list=aplteam-FilesAndDirs-4 -force'
         r,←⊂'  Copies all packages of major version 4 of the given package from [tatin]'
         r,←⊂']CopyRegistry /path/2/Reg -list=file=/myPkgs.txt'
         r,←⊂'  Copies all packages specified in the file /myPkgs.txt if not already available'
         r,←⊂'Note that the -noDeps flag (which prevents dependencies from being copied) is syntactially allowed'
         r,←⊂'but not documented because it is useful only for test cases.'
     :Case ⎕C'Debug'
     :Case ⎕C'LoadTatin'
     :Case ⎕C'ListRegistries'
     :Case ⎕C'ListPackages'
     :Case ⎕C'LoadPackages'
         r,←⊂'Examples:'
         r,←⊂'  ]Tatin.LoadPackages group-name-2.0.0                ⍝ Just full package ID without Registry'
         r,←⊂'  ]Tatin.LoadPackages [tatin]group-name-1.0           ⍝ Alias & package ID without patch no.'
         r,←⊂'  ]Tatin.LoadPackages [tatin]group-name-1             ⍝ Without patch and minor no.'
         r,←⊂'  ]Tatin.LoadPackages [tatin]group-name               ⍝ With any version information'
         r,←⊂'  ]Tatin.LoadPackages [tatin]/group-name-1.0.0        ⍝ With "/"'
         r,←⊂'  ]Tatin.LoadPackages [tatin]group-name-1.0.0         ⍝ Without "/"'
         r,←⊂'  ]Tatin.LoadPackages [tatin]name #                   ⍝ With target namespace'
         r,←⊂'  ]Tatin.LoadPackages [tatin]A@name #                 ⍝ With package alias'
         r,←⊂'  ]Tatin.LoadPackages name #                          ⍝ No Registry and no group'
         r,←⊂'  ]Tatin.LoadPackages A@name                          ⍝ No Registry and no group but alias'
         r,←⊂'  ]Tatin.LoadPackages A@name #.Foo.Goo                ⍝ With target namespace'
         r,←⊂'  ]Tatin.LoadPackages file:///path/group-name-1.0.0/  ⍝ Local Registry'
         r,←⊂'  ]Tatin.LoadPackages foo,bar                         ⍝ Multiple packages'
         r,←⊂'  ]Tatin.LoadPackages [company]foo,[personal]bar      ⍝ Multiple packages from specific servers'
     :Case ⎕C'InstallPackages'
         r,←⊂'Examples:'
         r,←⊂'  ]Tatin.InstallPackages [tatin]/group-name-1.0.0 /path       ⍝ Alias & package ID with "/"'
         r,←⊂'  ]Tatin.InstallPackages [tatin]group-name-1.0.0 /path        ⍝ Alias & package ID without "/"'
         r,←⊂'  ]Tatin.InstallPackages [tatin]group-name-1.0 /path          ⍝ No patch no'
         r,←⊂'  ]Tatin.InstallPackages [tatin]group-name-1 /path            ⍝ Neither patch nor minor no.'
         r,←⊂'  ]Tatin.InstallPackages [tatin]group-name /path              ⍝ No version information at all'
         r,←⊂'  ]Tatin.InstallPackages [tatin]name /path                    ⍝ No group and no version information'
         r,←⊂'  ]Tatin.InstallPackages [tatin]A@name /path                  ⍝ Registry alias and package alias'
         r,←⊂'  ]Tatin.InstallPackages group-name-2.0.0 /path               ⍝ Just a full package ID'
         r,←⊂'  ]Tatin.InstallPackages name /path                           ⍝ Just a package name'
         r,←⊂'  ]Tatin.InstallPackages A@name /path                         ⍝ Just a package name with an alias'
         r,←⊂'  ]Tatin.InstallPackages file:///path/grp-name-1.0.0/ /path/  ⍝ Package in a local Registry'
         r,←⊂'  ]Tatin.InstallPackages foo,bar /install/                    ⍝ Multiple packages'
         r,←⊂'  ]Tatin.InstallPackages foo [MyUCMDs]                        ⍝ Install user command foo'
         r,←⊂'  ]Tatin.InstallPackages foo [MyUCMDs]test                    ⍝ Install user command foo into test/'
     :Case ⎕C'LoadDependencies'
     :Case ⎕C'UserSettings'
     :Case ⎕C'PackageConfig'
     :Case ⎕C'UnInstallPackages'
     :Case ⎕C'PackageDependencies'
     :Case ⎕C'BuildPackage'
     :Case ⎕C'PublishPackage'
     :Case ⎕C'ListVersions'
     :Case ⎕C'Version'
     :Case ⎕C'ListTags'
     :Case ⎕C'Init'
     :Case ⎕C'CheckForLaterVersion'
     :Case ⎕C'DeletePackages'
         r,←⊂'Examples:'
         r,←⊂'  ]Tatin.DeletePackages https:/tatin.dev/group-name-1.0.0     ⍝ Registry URL & package ID'
         r,←⊂'  ]Tatin.DeletePackages [test-tatin]group-name-1.0.0          ⍝ Registry alias & package ID'
         r,←⊂'  ]Tatin.DeletePackages [test-tatin]name-1.0.0                ⍝ No group name'
         r,←⊂'  ]Tatin.DeletePackages [test-tatin]name-1                    ⍝ All versions of that package with major=1'
         r,←⊂'  ]Tatin.DeletePackages [test-tatin]name                      ⍝ All versions of that package'
         r,←⊂'  ]Tatin.DeletePackages file:///path/2/Registry/grp-foo-1.0.0 ⍝ Local package'
     :Case ⎕C'GetDeletePolicy'
     :Case ⎕C'Documentation'
     :Case ⎕C'ReInstallDependencies'
         r,←⊂'Examples:'
         r,←⊂'  ]Tatin.ReInstallDependencies /path/'
         r,←⊂'  ]Tatin.ReInstallDependencies /path/ [tatin]'
         r,←⊂'  ]Tatin.ReInstallDependencies /path/ [tatin] -nobetas'
         r,←⊂'  ]Tatin.ReInstallDependencies /path/ [tatin] -nobetas -dry'
         r,←⊂'  ]Tatin.ReInstallDependencies /path/ [tatin] -nobetas -force'
         r,←⊂'  ]Tatin.ReInstallDependencies /path/ [tatin] -nobetas -force -update'
     :Case ⎕C'Ping'
         r,←⊂'Examples:'
         r,←⊂'  ]Tatin.Ping'
         r,←⊂'  ]Tatin.Ping ?'
         r,←⊂'  ]Tatin.Ping [tatin]'
         r,←⊂'  ]Tatin.Ping ',tatinURL
         r,←⊂'  ]Tatin.Ping http://tatin.dev   ⍝ This won''t work'
     :Else
                  ⍝ Not available then
     :EndSelect
 :EndSelect
