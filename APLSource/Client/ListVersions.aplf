 mat←{dateFlag}ListVersions url;client;request;res;url_;registries;registry;buff;flag
⍝ Lists all versions of a package.
⍝ `url` is one of:
⍝ * A package name is specified
⍝ * A path to a Registry and "group" and "name" of a package
⍝ In the first case all defined Registries with a priority greater than zero are scanned.
⍝ A matrix with two columns is returned: URL and full package ID.\\
⍝ In the second case the specified Registry is scanned. A matrix with one column with full package IDs is returned.\\
⍝ You may omit the group name; that would not make a difference when the name is used only within one group,
⍝ but if it is used in more than one group, then all of them are listed.
⍝ The package ID must not specify a version number.\\
⍝ By default the publishing date is not included, but you my change this by passing a 1 as ⍺.
⍝ In that case an additional column is added to the result.
 dateFlag←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'dateFlag'
 mat←(0,(2+dateFlag))⍴⍬
 url_←ReplaceRegistryAlias url
 :If IsHTTP url_
     'No valid URI provided'Assert 0<≢url_
     'Invalid package ID'Assert 0 1 2∊⍨('\/'A.Last url_)+.='-'     ⍝ Must be either "name" or "group-name" or "group-name-major" or "name-major"
     :If Reg.IsHTTP url_
         mat←⍪dateFlag ListVersions_ url_
     :Else
         mat←⍪dateFlag Reg.ListVersions url_
     :EndIf
 :ElseIf ∨/'/\'∊url_
     :If 0<≢buff←dateFlag Reg.ListVersions url_
         mat←⍪buff
     :EndIf
 :Else
     registries←ListRegistries 0
     :If 0<≢registries←(0<registries[;4])⌿registries ⍝ Ignore those with a priority of 0
     :AndIf 0<≢registries←({(⍳≢⍵)=⍵⍳⍵}⊃¨{⍵≡0:⍺ ⋄ (¯1↓⍺),':',(⍕⍵),'/'}/¨↓registries[;1 3])⌿registries
         :For registry :In registries[;1]
             :If 0<≢buff←dateFlag ListVersions registry,url
                 mat⍪←(⊂registry),buff
             :EndIf
         :EndFor
     :EndIf
 :EndIf
⍝Done
