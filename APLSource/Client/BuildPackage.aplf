 zipFilename←{dependencyFolder}BuildPackage(projectPath targetPath version);cfg;fileList;zipObj;tempFilename;deps;errMsg;cfg_;dependencies;hasBuildNo
 ⍝ projectPath → folder to create the package from.\\
 ⍝ targetPath  → folder where the resulting ZIP is saved.\\
 ⍝ The targetPath defaults to the projectPath if it is empty.\\
 ⍝ `version` can be one of:
 ⍝ * A pattern starting with a plus (+) like +0.0.1 or +0.1.0 or +1.0.0\\
 ⍝   This leads to a bumped patch number of patch minor number or patched major number.
 ⍝ * A string representing a version number like "1.2.3" or "10.2.43+123"\\
 ⍝   If no build number is specified the original build number is preserved. Otherwise
 ⍝   the build number is overwritten. In any case is the build number bumped.
 dependencyFolder←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'dependencyFolder'
 :If 0=≢projectPath
     projectPath←F.PWD,'/'
 :EndIf
 projectPath←RemoveFileProtocol projectPath
 projectPath←⊃1 ⎕NPARTS projectPath,'/'
 targetPath←Reg.AddSlash RemoveFileProtocol projectPath{⍺{0=≢⍵:⍺ ⋄ ⍵}⍎⍵ ⋄ ⍺}'targetPath'
 targetPath←⊃1 ⎕NPARTS targetPath
 cfg_←ReadPackageConfigFile projectPath
 cfg←InitPackageConfig cfg_
 ValidateConfig cfg projectPath
 hasBuildNo←0
 :If 0<≢version
     :If '+'=1↑version
         cfg.version←version AddToVersion cfg.version
     :Else
         hasBuildNo←'+'∊version
         cfg.version←version{'+'∊⍺:⍺ ⋄ ⍺,{⍵↓⍨¯1+⍵⍳'+'}⍵}cfg.version ⍝ Assign `version` but preserves build number if not specified
     :EndIf
 :EndIf
 cfg.version←IncreaseBuildNumber⍣(⊃~hasBuildNo)⊣cfg.version
 :If 0<≢cfg.assets
     cfg.assets←{1=≢⍵:⊃⍵ ⋄ 1↓⊃,/',',¨⍵}ProcessAssetsProp projectPath cfg.assets
 :EndIf
 :If ≢/{⎕JSON⍠('Dialect' 'JSON5')⊣⍵}¨cfg cfg_
     WritePackageConfigFile projectPath cfg
 :EndIf
 dependencies←dependencyFolder EstablishPackageDependencies projectPath
 zipFilename←F.ExpandPath targetPath,(GetPackageFilenameFromCfg cfg),'.zip'
 :If 0=F.Exists targetPath
     F.MkDir targetPath
 :Else
     F.DeleteFile zipFilename
 :EndIf
 zipObj←⎕NEW ZipArchive(,⊂zipFilename)
 fileList←projectPath GetAllFiles cfg
 'No source code?!'Assert 0<≢fileList
 projectPath zipObj.Add fileList
 projectPath zipObj.Add CFG_Name
 :If 0<≢cfg.assets
     {projectPath zipObj.Add ⍵}¨','(≠⊆⊢)cfg.assets
 :EndIf
 :If 0<cfg.⎕NC'userCommandScript'
 :AndIf 0<≢cfg.userCommandScript
     :If F.IsFile projectPath,cfg.userCommandScript
         (projectPath,⊃⎕NPARTS cfg.userCommandScript)zipObj.Add⊃,/1↓⎕NPARTS cfg.userCommandScript
         zipObj.Delete cfg.userCommandScript
     :Else
         zipObj.Dispose
         ⎕DL 0.2
         3 ⎕NDELETE zipFilename
         ('Not found: ',cfg.userCommandScript)Assert 0
     :EndIf
 :EndIf
 :If F.IsFile projectPath,'LICENSE'    ⍝ By convention...
     projectPath zipObj.Add'LICENSE'   ⍝ ... we add a file "LICENSE" if there is one
 :EndIf
 :If 0<cfg.⎕NC'files'
 :AndIf 0<≢cfg.files
     projectPath∘{(p f e)←⎕NPARTS ⍵ ⋄ 0=≢p:⍺ zipObj.Add ⍵ ⋄ (⍺,p,'/')zipObj.Add f,e}¨','(≠⊆⊢)cfg.files
 :EndIf
 :If 0<≢dependencies
     (projectPath,dependencies)zipObj.Add'/apl-dependencies.txt'
 :ElseIf F.IsFile projectPath,'apl-dependencies.txt'
     projectPath zipObj.Add'apl-dependencies.txt'
 :EndIf
 zipObj.Dispose
⍝Done
