 r←{noBetas}InstallPackages(identifiers targetFolder);bool;principal;msg;path2cache;cacheFlag;identifier_;success;question;sep;qdmx;buff;cfg;isUserCommand;firstFlag;filename
 ;buildList;level;requestedBy;packageID2;installFolder;tempDir;zipFilename;id;identifier;packageID;alias
⍝ Install package `identifiers` in `targetFolder`.\\
⍝ `identifiers` must be a simple char vector holding the package IDs (possibly incomplete) for one or more packages.
⍝ Multiple packages must be separated by commas.
⍝ `identifierd` must be one (or more) of:
⍝ * an HTTP request for a package
⍝ * a ZIP file holding a package
⍝ * a folder holding a package (like file://C:\Temp\group-name-version\\)
⍝ * a path to a package in a registry (like [RegistryAlias]{group}-{name}-{major.minor.patch} or C:\MyReg\{group}-{name}-{major.minor.patch})
⍝ * a package ID; Tatin will then attempt to find that package in the Registries defined in the Client's config file.\\
⍝ * The internal alias [MyUCMDs] (case independent). This installs the package(s) into a folder MyUCMDs/packages
⍝ You may omit minor+patch or even major+minor+patch in order to install the latest version.
⍝ By default beta versions are considered in case the package ID is incomplete, but you can suppress them by passing 0 as ⍺.\\
⍝ `←` Full name of principal packages finally loaded, including an alias if specified.
 r←''
 noBetas←{0<⎕NC ⍵:⍎⍵ ⋄ Reg.GetNoBetasDefault}'noBetas'
 :If '[myucmds]'{⍺≡⎕C(≢⍺)↑⍵}targetFolder
     buff←{⍵↓⍨⍵⍳']'}targetFolder
     'You must not specify anything after [MyUCMDs]'Assert 0=≢buff
     targetFolder←(GetMyUCMDsFolder''),'/packages/'
     msg←'Sure that you want to install:',LF,'  ',(2⊃⎕NPARTS identifiers),LF,'into:',LF,'   ',targetFolder,LF,'?'
     :If 0=CommTools.YesOrNo msg
         ⎕←'Cancelled by user'
         :Return
     :EndIf
 :EndIf
 isUserCommand←∨/(F.EnforceSlash¨GetAllUserCommandFolder,¨'\'){⍺∊(≢¨⍺)↑¨⊂⍵}F.EnforceSlash targetFolder,'/'
 identifiers←','(≠⊆⊢)identifiers
 EstablishEmptyPermanentConnections 0
 firstFlag←1
 :Trap 998
     :For identifier_ :In identifiers
         (alias identifier_)←SplitAtAlias identifier_
         identifier←ReplaceRegistryAlias identifier_
         ('Unknown',(∧/'[]'∊identifier_)/' alias')Assert 0<≢identifier
         identifier←noBetas CheckVersion identifier
         packageID←GetPackageIDFromFilename identifier
         {}{'Unable to create target directory'Assert F.MkDir ⍵}⍣(firstFlag∧~F.IsDir targetFolder)⊢targetFolder
         :If 0=≢identifier    ⍝ Not found?
             PrintToSession'Not found: ',identifier_
             :Continue
         :EndIf
         PrintToSession'  Attempting to install ',identifier,'...'
         :If ∧/~'\/'∊identifier
         :AndIf '.zip'≢⎕C ¯4↑identifier
             :If ~∨/'/\:'∊identifier
                 identifier←(EstablishRegistry packageID),packageID
                 :If 0=≢(-≢packageID)↓identifier
                     :Continue
                 :EndIf
                 PrintToSession⊃{'Installing <',⍵,'> from Registry ',⍺,'...'}/{⍵{(⍵↓⍺)(⍵↑⍺)}1+-'/'⍳⍨⌽⍵}identifier
             :EndIf
         :EndIf
         :If '.zip'≡⎕C ¯4↑identifier
         :AndIf Reg.IsHTTP identifier
             CloseConnections 1
             'ZIP files cannot be installed via HTTP'Assert 0
         :EndIf
         PrintToSession'  Establish dependencies...'
         r,←targetFolder InstallPackage_ alias identifier
         CloseConnections 0
         packageID←GetPackageIDFromFilename identifier
         cfg←ReadPackageConfigFile targetFolder,'/',packageID,'/',CFG_Name
         :If isUserCommand
             filename←⊃,/1↓⎕NPARTS cfg.userCommandScript
             F.DeleteFile targetFolder,filename  ⍝ In case the user command is installed again
             targetFolder(⎕NMOVE Reg.F.ExecNfunction)targetFolder,'/',packageID,'/',filename  ⍝ Move UC script to the root
         :EndIf
         firstFlag←0
     :EndFor
 :Else
     qdmx←⎕DMX
     CloseConnections 1
     :Trap 0 ⋄ F.RmDir tempDir ⋄ :EndTrap
     (⊃{0=≢⍺:⍵ ⋄ ⍺}/qdmx.(Message EM))⎕SIGNAL{⍺=0:⍵ ⋄ ⍺}/qdmx.(ENX EN)
 :EndTrap
⍝Done
