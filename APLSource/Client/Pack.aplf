 zipFilename←{dependencyFolder}Pack y;projectPath;targetPath;cfg;fileList;zipObj;tempFilename;deps;errMsg;cfg_;dependencies
 ⍝ projectPath → folder to create package from\\
 ⍝ targetPath  → folder to put package in\\
 ⍝ The targetPath defaults to the projectPath
 ⍝ ←             path to package file created
 (projectPath targetPath)←2↑(⊆y),⊆y
 (projectPath targetPath)←Reg.AddSlash¨projectPath targetPath
 dependencyFolder←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'dependencyFolder'
 :If 0=≢projectPath
     projectPath←F.PWD,'/'
 :EndIf
 projectPath←RemoveFileProtocol projectPath
 projectPath←⊃1 ⎕NPARTS projectPath,'/'
 targetPath←RemoveFileProtocol projectPath{0<⎕NC ⍵:⍎⍵ ⋄ ⍺}'targetPath'
 targetPath←⊃1 ⎕NPARTS targetPath
 cfg_←ReadPackageConfigFile projectPath
 cfg←InitPackageConfig cfg_
 ValidateConfig cfg projectPath
 :If ≢/{⎕JSON⍠('Dialect' 'JSON5')⊣⍵}¨cfg cfg_
     WritePackageConfigFile projectPath cfg
 :EndIf
 dependencies←dependencyFolder EstablishPackageDependencies projectPath
 zipFilename←F.ExpandPath targetPath,(GetPackageFilenameFromCfg cfg),'.zip'
 :If 0=F.Exists targetPath
     F.MkDir targetPath
 :Else
     F.DeleteFile zipFilename
 :EndIf
 zipObj←⎕NEW ZipArchive(,⊂zipFilename)
 fileList←projectPath GetAllFiles cfg
 'No source code?!'Assert 0<≢fileList
 projectPath zipObj.Add fileList
 projectPath zipObj.Add CFG_Name
 :If 0<≢cfg.assets
     {projectPath zipObj.Add ⍵}¨','(≠⊆⊢)cfg.assets
 :EndIf
 :If 0<≢dependencies
     (projectPath,dependencies)zipObj.Add'/apl-dependencies.txt'
 :ElseIf F.IsFile projectPath,'apl-dependencies.txt'
     projectPath zipObj.Add'apl-dependencies.txt'
 :EndIf
 zipObj.Dispose
⍝Done
