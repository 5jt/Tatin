 zipFilename←Pack(projectPath targetPath);cfg;fileList;zipObj;tempFilename;deps
 ⍝ projectPath → folder to create package from\\
 ⍝ targetPath  → folder to put package in\\
 ⍝ ←             path to package file created
 targetPath←RemoveFileProtocol targetPath
 projectPath←⊃1 ⎕NPARTS projectPath,'/'
 targetPath←⊃1 ⎕NPARTS targetPath,'/'
 cfg←ReadPackageConfigFile projectPath                                         ⍝ Check projectPath has config
 ValidateConfig cfg
 zipFilename←F.ExpandPath targetPath,(GetPackageFilenameFromCfg cfg),'.zip'
 :If 0=⎕NEXISTS targetPath
     'Create!'F.CheckPath targetPath
 :Else
     F.DeleteFile zipFilename
 :EndIf
 zipObj←⎕NEW DotNetZip(,⊂zipFilename)
 'No source code?!'Assert 0<≢fileList←projectPath GetAllFiles cfg
 projectPath zipObj.Add fileList
 projectPath zipObj.Add CFG_NAME
 :If 0<≢cfg.assets
     projectPath zipObj.Add cfg.assets
 :EndIf
 :If F.Exists projectPath,Dependencies.DEP_NAME
     tempFilename←F.GetTempFilename2''
     F.DeleteFile tempFilename
     F.MkDir tempFilename
     tempFilename,←'/',Dependencies.DEP_NAME
     tempFilename ⎕NCOPY⍠('IfExists' 'Replace')⊣projectPath,Dependencies.DEP_NAME
     deps←1⊃F.NGET tempFilename 1
     deps←ReplaceRegistryAlias¨deps
     (⊂deps)F.NPUT tempFilename 1
     (⊃⎕NPARTS tempFilename)zipObj.Add Dependencies.DEP_NAME
     ⎕DL 0.2
     F.RmDir tempFilename
 :EndIf
 zipObj.Dispose
⍝Done
