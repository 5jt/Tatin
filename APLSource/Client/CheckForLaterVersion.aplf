 r←{flags}CheckForLaterVersion path;buildFilename;topLevel;buildList;dependencies;majorVersions;∆PermanentConnections;bool
⍝ `path` must point to a folder with installed packages, meaning that there
⍝ must be a file apl-buildlist.json available. This is mandatory.
⍝ The optional left argument can carry flags as a single integer:
⍝ 1. Major: should later major version be listed as well? Defaults to 0.  (1)
⍝ 2. Dependencies: should dependencies be checked as well? Defaults to 0. (2)
⍝ You may specify both flags as true by passing a 3.
⍝ Checks whether there are later versions available for what's specified by the build list.\\
⍝ By default only minor and patch are part of the check. By specifying 1 as `major`
⍝ you may change this default behaviour and list any later major versions instead.\\
⍝ Note that this function scans all known registries **with a priority greater than zero**!
⍝ Returns a matrix with five columns:
⍝ [;1] Original package ID
⍝ [;2] "Latest" package ID
⍝ [;3] Original URL
⍝ [;4] Flag; 1 means later version is available
⍝ [;5] URL the latest version was found at but empty in case it's identical with [;3]
 r←0 5⍴⍬
 flags←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'flags'
 'Invalid left argument'Assert 83=⎕DR flags
 'Invalid right argument'Assert(' '=1↑0⍴⊂path)∧(1=≡path)
 (majorVersions dependencies)←2↑Reg.IntToBits flags
 path←Reg.AddSlash path
 'Folder does not exist'Assert F.IsDir path
 buildFilename←path,Reg.BuildListFilename
 ('File not found: ',buildFilename)Assert F.IsFile buildFilename
 buildList←Reg.JSON⊃F.NGET buildFilename
 :If bool←(∨/IsHTTP¨ buildList.url)∧0∊(RemovePackageID¨buildList.url)∊{⍵[;1]⌿⍨⍵[;4]>0}(1 ListRegistries'')
     CloseConnections 1
     0 Assert⍨'The build list carries entries that are not on the Tatin Registry search path'
 :Else
     ∆PermanentConnections←⎕NS''                ⍝ Establish but without any connections yet: we don't know whether we will need any
     ∆PermanentConnections.keepOpen←1           ⍝ But if we do we keep them open until this functions gets back control (see bottom: CloseConnections)
     :If 0<≢buildList.packageID
         r←↑majorVersions CheckForLaterVersion_¨(dependencies⌈buildList.principal)/buildList.packageID
     :EndIf
     CloseConnections 1
 :EndIf
 ⍝Done
