 (list msg)←{prune}UnInstallPackage2(folder packageID);pkgDepFilename;installedPkgs;toBeRemoved;rc;bool;principalPkgs;buildList_old;packages;packageID_2;buildList_old;superfluous;b;buildList_new;deps

 ∘∘∘    ⍝ My attempt to satisfy Davin Church's request, but I am absolutely not happy

⍝ If `folder` carries a dependency file then this function attempts to un-install the package
⍝ `packageID` and all its dependencies but only in case those are neither top-level packages nor
⍝ required by other packages.\\
⍝ Only top-level packages and can be un-installed, and only non-princiapl packages that are not required
⍝ anymore will be un-installed implicitly.
⍝ Note that `packageID` must not be empty with the exception that it might be empty if `prune` is `.
⍝ In that case only a clean-up attempt is made.\\
⍝ To keep things simple Tatin performs the following steps:
⍝  1. It checks whether `packageID` is a member of the build list: if that is not the case no action is taken.
⍝  2. It checks whether the package is also mentioned in the dependency file. If not an error is thrown.
⍝  3. It removes `packagedID` from the dependency file and writes it back to disk.
⍝  4. It re-compiles the build list based on the new dependency file.
⍝  5. It removes all packages that are not mentioned in the build list anymore except principal packages
⍝ Returns a two-item vector:
⍝ 1. List with the fully qualified names of all removed packages.
⍝ 2. Message, ideally empty. This might also carry warnings about principal packages that are not required.
⍝ Note that removing the directories hosting the packages might fail for all sorts of reasons even
⍝ though the package and any dependencies were already successfully removed from both the dependency
⍝ file and the build list.
 prune←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'prune'
 list←msg←''
 '"folder" is invalid'Assert F.IsDir folder
 folder←Reg.AddSlash folder
 pkgDepFilename←folder,Reg.DependenciesFilename
 'The folder has no dependency file'Assert F.IsFile pkgDepFilename
 principalPkgs←(1⊃F.NGET pkgDepFilename 1)~⊂''
 (Reg.DependenciesFilename,' is empty')Assert 0<≢principalPkgs
 :If ~prune
     'No package ID specified'Assert 0<≢packageID
 :EndIf
 :If 0<≢packageID
 :AndIf '@'∨.=packageID[1,≢packageID]
     packageID_2←IdentifyInstalledPackageID principalPkgs packageID
     :If 0=≢packageID_2
         msg←'Package is not installed'
         :Return
     :EndIf
 :Else
     packageID_2←packageID
 :EndIf
 :If ~prune
     'Invalid package ID'Assert Reg.IsValidPackageID_Complete RemoveAlias packageID_2
 :EndIf
 buildList_old←LoadBuildList folder
 :If 0<≢packageID_2
     :If (⊂packageID_2)∊buildList_old[;2]
         :If ~(⊂packageID_2)∊principalPkgs
             msg←'Cannot uninstall: is not a principal package'
             :Return
         :ElseIf 1=≢principalPkgs
             msg←'The very last principal package cannot be uninstalled'
             :Return
         :EndIf
         (⊂principalPkgs~⊂packageID_2)F.NPUT pkgDepFilename 1
     :Else
         :If ~(⊂packageID_2)∊RemoveAlias¨buildList_old[;2]
         :AndIf F.IsDir folder,packageID_2
             F.RmDir folder,packageID_2
             list←,⊂packageID_2
             :Return
         :Else
             msg←'Package is not installed'
             :If ~prune
                 :Return
             :EndIf
         :EndIf
     :EndIf
 :EndIf
 buildList_new←1 CompileBuildList folder
 installedPkgs←(≢folder)↓¨F.ListDirs folder
 :If prune
     packages←RemoveAlias¨buildList_new[;2]
     list←(⊂packageID_2),packages{(~⍵∊⍺)/⍵}installedPkgs~⊂RemoveAlias packageID_2
     F.RmDir folder∘,¨RemoveAlias¨list
 :Else
     toBeRemoved←folder,RemoveAlias packageID_2
     deps←⊃F.NGET toBeRemoved,'/',Reg.DependenciesFilename
     :If ~(⊂RemoveAlias packageID_2)∊buildList_new[;2]   ⍝ Only if it's not also a dependency...
         F.RmDir toBeRemoved                          ⍝ ... can it be deleted!
         installedPkgs~←⊂RemoveAlias packageID_2
     :EndIf

     list←,⊆packageID_2                               ⍝ Returned even if it was not removed from disk because then it is not a principal package anymore
     :If 0<≢superfluous←installedPkgs~(⊂RemoveAlias packageID_2),RemoveAlias¨buildList_new[;2]
         msg←'Warning - superfluous packages: ',⊃{⍺,',',⍵}/superfluous
     :EndIf
 :EndIf
⍝Done
