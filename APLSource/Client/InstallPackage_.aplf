 (tempDir cacheFlag)←InstallPackage_(packageID url);zipFilename;isHTTP;path
⍝ Fetches a package and unzips it into a temp folder.
⍝ When caching is on, the temp folder is created within the top-level of the cache folder.
⍝ Otherwise a folder is created inside the temp directory of the given OS.
 :If isHTTP←Reg.IsHTTP url
     PrintToSession'  Fetching from ',url,'...'
     zipFilename←GetPackageViaHTTP url,packageID
 :Else
     :If '.zip'≡¯4↑url
         zipFilename←RemoveFileProtocol url
     :Else
         zipFilename←RemoveFileProtocol url,'/',packageID,'.zip'
     :EndIf
     ('File <',zipFilename,'> does not exist')Assert F.IsFile zipFilename
 :EndIf
 :If MyUserSettings.caching                                                              ⍝ If caching is generally active...
 :AndIf IsHTTP url                                                                       ⍝ ... and its coming from the web (rather than locally) ...
 :AndIf 0=GetNoCachingFlag url                                                           ⍝ ... and is not switched off for this particular registry...
 :AndIf 'Any'≢GetDeletePolicy url                                                        ⍝ ... and the registry does not operate an "All" delete policy ...
 :AndIf ~Reg.IsBeta packageID                                                            ⍝ ... and the package is not a beta version...
     cacheFlag←1
     tempDir←GetPathToPackageCache,'/temp/',packageID,'_',(GetMD5 zipFilename),'_',⎕AN   ⍝ ... then and only then do we write to the cache folder.
 :Else
     tempDir←Reg.GetTempDir,'/',packageID,'_',(GetMD5 zipFilename),'_',⎕AN               ⍝ Otherwise to the temp folder of the OS
     cacheFlag←0
 :EndIf
 :If 0=F.IsDir tempDir
     ⎕DL 0.02
     F.MkDir tempDir
     PrintToSession'  Unzipping ',zipFilename,'...'
     zipFilename DotNetZip.UnzipTo tempDir
 :EndIf
 tempDir Add2Config'uri'(RemoveFileProtocol url)
 :If isHTTP
     :If cacheFlag
         tempDir←MovePackageToCache tempDir url packageID
     :EndIf
     F.DeleteFile zipFilename
 :EndIf
⍝Done
