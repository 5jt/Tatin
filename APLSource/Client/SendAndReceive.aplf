 r←SendAndReceive(uri request);client;uri_;port;⎕TRAP;msg;errorCounter
⍝ Whether there is a (semi-)global ∆PermanentConnections or not makes a difference here:
⍝ * If it exists it's supposed to hold clients for all HTTP registries with a priority>0.
⍝   This improved performance dramatically because the same connection can be used again.
⍝ * If it does not a new client is created, and the connection closed after the request
 request.Headers,←⊂Reg.TatinVersionAsHttpHeader
 msg←uri,' did not respond'
 ⎕TRAP←(345 'C'('''',uri,''' SignalNoConnection ''',msg,''''))(347 'N')(348 'C' '→∆Go,errorCounter←errorCounter+1')(0 'S')
 errorCounter←0
 :If 9=⎕NC'∆PermanentConnections'
     uri_←1 CompileNameFromUrl uri
 :AndIf 9=∆PermanentConnections.⎕NC uri_
     client←∆PermanentConnections.⍎uri_
     msg←uri,' did not respond'
     {}client R.Send¨request      ⍝ Pipeline requests
     r←client R.Receive¨request   ⍝ Wait for all
 :Else
∆Go: ⍝ Also jumped to in case the server closed the connection for some reason

     :If 0 ⍝ For testing pipelined commands
         :If 0<⎕NC'∆PermanentConnections'
         :AndIf 0<errorCounter
             ⎕←'*** No. of errors: ',⍕errorCounter
         :EndIf
     :EndIf

     ⎕EX'∆PermanentConnections'   ⍝ Paranoia
     :If errorCounter>5
         'No connection'⎕SIGNAL 347
     :Else
         ⎕DL 0.5×errorCounter>0
         client←NewClient uri
         r←client R.SendAndReceive request
     :EndIf
 :EndIf
⍝Done
