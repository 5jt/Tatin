 r←{noBetas}InstallPackage(identifier_ targetFolder);bool;principal
 ;buildList;level;requestedBy;packageID2;url;installFolder;tempDir;zipFilename;id;identifier;packageID;alias
⍝ Install package `identifier` in `targetFolder`.\\
⍝ `identifier` must be one of:
⍝ * an HTTP request for a package
⍝ * a ZIP file holding a package
⍝ * a folder holding a package (like file://C:\Temp\group-name-version\\)
⍝ * a path to a package in a registry (like [RegistryAlias]{group}-{name}-{major.minor.patch} or C:\MyReg\{group}-{name}-{major.minor.patch}')
⍝ * a package ID; Tatin will then attempt to find that package in the Registries defined in the Client's config file.\\
⍝ You may omit either minor+patch or even major+minor+patch in order to install the latest version.
⍝ When the best version is to be determined then by default any beta versions are ignored. You can overwrite this by specifying a 0 as ⍺.
⍝ By default beta versions are considered in case the package ID is incomplete, but you can suppress them by passing 0 as ⍺.\\
⍝ `←` Full name of `identifier_` finally loaded.
 r←''
 noBetas←{0<⎕NC ⍵:⍎⍵ ⋄ 1}'noBetas'
 '"targetFolder" is invalid'Assert F.IsDir⍕targetFolder
 (alias identifier_)←SplitAtAlias identifier_
 identifier←ReplaceRegistryAlias identifier_
 ('Unknown',(∧/'[]'∊identifier_)/' alias')Assert 0<≢identifier
 identifier←noBetas CheckVersion identifier
 'Package not found'Assert 0<≢identifier
 PrintToSession'  Attempting to install ',identifier,'...'
 :If ~'/'∊identifier
 :AndIf '.zip'≢⎕C ¯4↑identifier
     packageID←GetPackageIDFromFilename identifier
     :If ~∨/'/\:'∊identifier
         identifier←(EstablishRegistry packageID),packageID
         PrintToSession⊃{'Installing <',⍵,'> from Registry ',⍺,'...'}/{⍵{(⍵↓⍺)(⍵↑⍺)}1+-'/'⍳⍨⌽⍵}identifier
     :EndIf
 :EndIf
 :If '.zip'≡⎕C ¯4↑identifier
 :AndIf Reg.IsHTTP identifier
     'ZIP files cannot be installed via HTTP'Assert 0
 :EndIf
 PrintToSession'  Establish dependencies...'
 :If 0<≢buildList←GetDependencyTree alias,identifier
     PrintToSession'  ',(⍕≢buildList),' dependencies identified'
     CheckAlias targetFolder alias
     :For principal packageID2 url :In ↓buildList
         (alias packageID2)←SplitAtAlias packageID2
         installFolder←(Reg.AddSlash targetFolder),packageID2
         :If principal
         :AndIf F.Exists installFolder
             ('Installation folder "',installFolder,'" is a file')Assert 0=F.IsFile installFolder
         :EndIf
         :If 0=F.IsDir installFolder
             tempDir←InstallPackage_ packageID2 url
             installFolder ⎕NMOVE tempDir
             F.RmDir tempDir
         :EndIf
         :If principal
             PrintToSession'  Add ',packageID2,' to dependency file...'
             targetFolder Dependencies.Add alias,packageID2
         :EndIf
     :EndFor
     PrintToSession'  Saving build list... '
     buildList←SaveBuildList buildList targetFolder
     :If ∨/bool←∨/¨({'['∊⍵:⍵↓⍨⍵⍳']' ⋄ ∨/b←'://'⍷⍵:(2+b⍳1)↓⍵ ⋄ ⍵}identifier_)∘⍷¨buildList[;2]
         r←2⊃buildList[bool⍳1;]
     :Else
         r←2⊃buildList[1;]
     :EndIf
 :EndIf
⍝Done
