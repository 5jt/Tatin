 (statusCode errMsg)←DeletePackage_(url packageID);statusCode;errMsg;request;response;en;msg;rc
⍝ Deletes a package.\\
⍝ Whether deleting a package is possible depends on the "delete" policy operated by the server in question.\\
⍝ On the server side the delete policy is defined by the INI setting [CONFIG]DeletePackages ("None", "JustBetas", "Any").
 statusCode←200 ⋄ errMsg←''
 :If 'file://'{⍺≢(≢⍺)↑⍵}url
     ('Unknown Registry: "',url,'"')Assert(⊂EnforceTrailingSlash url)∊⊃¨{0≡⍵:⍺ ⋄ (¯1↓⍺),':',(⍕⍵),'/'}/¨MyUserSettings.registries.(uri port)
 :EndIf
 :If Reg.IsHTTP url
     {}Connect2Client url
     request←R.NewRequest 0
     request.RequestTarget←{'/'=1⍴⍵:⍵ ⋄ '/',⍵}packageID
     request.Method←'DELETE'
     request.Headers,←⊂'api-key'((MyUserSettings.GetRegistry url).api_key)
     response←SendAndReceive url request
     :If response.StatusCode≢200
         statusCode←response.StatusCode
         :If 405≡statusCode
             :If 0<≢response.Content
                 errMsg←'Server: ',response.Content
             :ElseIf ∨/'http://'⍷url
                 errMsg←'http:// is not supported'
             :Else
                 errMsg←'https:// is not supported'
             :EndIf
         :Else
             :If 0<≢response.Content
                 errMsg←'Server: ',response.Content
             :Else
                 errMsg←'Failed with status code ',⍕response.StatusCode
             :EndIf
         :EndIf
     :EndIf
 :Else
     url←'file://'{⍵↓⍨(≢⍺)×⍺≡(≢⍺)↑⍵}url
     :If F.IsDir url,packageID
         'Is not a package'Assert F.IsFile url,packageID,'/apl-package.json'
         (rc en msg)←F.RmDir url,packageID
         :If 0≠rc
             statusCode←400
             errMsg←'Remove operation failed, RC=',(⍕rc),'; ',msg
         :EndIf
     :Else
         statusCode←400
         errMsg←'Not found'
     :EndIf
 :EndIf
 :If 200=statusCode
     DeletePackageFromCache url packageID
 :EndIf
⍝Done
