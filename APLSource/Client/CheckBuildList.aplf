 {r}←{force}CheckBuildList folder;ts1;ts2;filename1;filename2;deps;tree;b;newTree;deps2;ind;deps_;msg
⍝ Checks the last modification date of both the build list and the dependency file.\\
⍝ We distinguish here between level-1 packages and other packages (=dependencies).
⍝ The level-1 packages are called top-level packages.
⍝ If the dependency file was modified after the build list was saved:
⍝ * If a top-level package was removed from the dependency file the build list is re-created
⍝ * If a dependency package is missing, re-installation is required and therefore an error thrown\\
⍝ In a second step we check whether the two files are consistent. If not we try to recompile and
⍝ check again. If that does not help an error is thrown.\\
⍝ In a second step we check whether the two files are consistent. If not we try to recompile and
⍝ check again. If that does not help an error is thrown.
 force←{0<⎕NC ⍵:⍎⍵ ⋄ 0}' force'
 folder←Reg.AddSlash folder
 filename1←folder,Reg.BuildListFilename
 filename2←folder,Reg.DependenciesFilename
 :If ~force
     ⍝ Tatin always writes the dependency file first and the build list next to file,
     ⍝ yet the timestamps in the milliseconds sometimes pretend it to be the other way round.
     ⍝ Therefore we add one second to make sure that we only re-build the build list when the
     ⍝ dependency file has really been modified by a user with an editor.
     ts1←1 GetFileTime filename1
     ts2←GetFileTime filename2
 :EndIf
 tree←ReadBuildList filename1
 deps←ReadDependencyList filename2
 deps_←RemoveAlias¨deps
 :If r←force
 :OrIf r←ts2>ts1
     :If F.IsFile filename1
         b←deps_∊RemoveAlias¨tree[;2]                       ⍝ Check consistency
         :If ∨/~b
             ('Invalid entry: ',(⊃{⍺,', ',⍵}/(~b)/deps_),'; re-install!')Assert 0
         :EndIf
     :EndIf
     0 CompileBuildList folder deps
 :EndIf
 :If 0∊deps∊tree[;2]
     0 CompileBuildList folder deps
     tree←ReadBuildList filename1
     deps←ReadDependencyList filename2
     deps_←RemoveAlias¨deps
     ('Build list and dependency list are incompatible in ',folder)Assert~0∊(Reg.RemoveMinorAndPatch¨deps_)∊Reg.RemoveMinorAndPatch¨tree[;2]
 :EndIf
 :If ∨/b←~F.IsDir¨folder∘,¨RemoveAlias¨tree[;2]
     msg←'The build list in ',LF,'  ',folder,LF,'  refers to'
     :If 1=+/b
         msg,←' a package that is not installed:',LF,'  ',(⍸b)⊃tree[;2]
     :Else
         msg,←' packages that are not installed:',LF,'  ',⊃{⍺,', ',⍵}/b/tree[;2]
     :EndIf
     msg Assert 0
 :EndIf
⍝Done
