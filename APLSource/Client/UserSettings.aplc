:Class UserSettings
⍝ By instanciating this class you get a representation of a user settings file required by Tatin.\\
⍝ In case no path pointing to a folder hosting such a file is provided to `⎕NEW`, the file is searched
⍝ for (and created if it does not yet exist) in the default location (user's home folder) which
⍝ depends on your operating system.\\
⍝ You may call `⎕SE.Tatin.GetUserHomeFolder ''` in order to find out that location.\\
⍝ Optionally you may specify a folder hosting the configuration file as an argument to `⎕NEW`.\\
⍝ Again, if the file does not yet exist it will be created with defaults.\\
⍝ After having created an instance you can add a Registry definition (read: an instance of the
⍝ `DefineRegistry` class) to the user settings with `AddRegistry`, and you may also call
⍝ `ReplaceRegistry` and `RemoveRegistry`.\\
⍝ Note that all changes are strictly workspace-only. If you want your changes to be written to file
⍝ you must call the `Save` method with a 1 as right argument. The only exception is that when the
⍝ file does not yet exist, it is created and written to disk with default.\\
⍝ If you have passed a path to where the user settings file should be created to `⎕NEW`, and you want
⍝ this file to become the default user settings file whenever Dyalog APL is fired up, then make a call
⍝ to the `MakeDefaultFile` instance method. This creates (or overwrites) a file '.tatin` that points
⍝ to that folder.\\
⍝ The full name of the file is available via the field `path2config`.\\
⍝ You may convert a particular Registry into an ordinary namespace by calling the `GetRegistry` method.

    :Field Public Shared ReadOnly cfg_name←'tatin-client.json'  ⍝ Name of the user config file is fixed

    ∇ make0;configFile;buff
      :Implements Constructor
      :Access Public
      Init1 ⍬
      _registries←⍬
      configFile←home.GetUserHomeFolder'.tatin'
      :If F.IsFile configFile                               ⍝ Has the user...
          buff←(∊1⊃F.NGET configFile)~⎕TC
      :AndIf 0<≢buff                                        ⍝ ... specified her own location for the user settings file?
          _path2config←AddSlash buff                        ⍝ Then we accept that
      :Else
          _path2config←AddSlash home.GetUserHomeFolder ⍬    ⍝ By default it's the user's home folder on all platforms
      :EndIf
      :If F.IsFile _path2config,cfg_name                    ⍝ If it exists...
          Read _path2config                                 ⍝ we raed it
      :Else
          _registries←⍬                                     ⍝ otherwise we create it with default values...
          AddPrincipalServer ⍬
          Save 1
      :EndIf
    ∇

    ∇ make1(path2config_);reg;buff
      :Implements Constructor
      :Access Public
      Init1 ⍬
       ⍝ In case the user passed the fully qualifed name rather than just the folder:
      :If cfg_name{⍺≡(-≢⍺)↑⍵}path2config_
          path2config_←(-≢cfg_name)↓path2config_
      :EndIf
      'Is not a directory?!'Assert F.IsDir path2config_
      _path2config←AddSlash path2config_
      :If F.IsFile path2config
          Read path2config
      :Else
          _registries←⍬
          AddPrincipalServer ⍬
          Save 1
      :EndIf
    ∇

    ∇ Init1 dummy
    ⍝ Early initialisation
      home←(⊃⊃⎕CLASS ⎕THIS).##
      F←home.F ⋄ A←home.A
      _source←''
    ∇

    :Property source
    ⍝ Defines the default for the "source" property of any package.\\
    ⍝ Setting this might be useful in case you use most of the time the same source folder, so it makes
    ⍝ sense to pre-populate a packages "source" property with a default defined here.
    :Access Public Instance
        ∇ r←get
          r←_source
        ∇
        ∇ set value;buff
          buff←value.NewValue
          '"source" is invalid (depth)'Assert 1=≡buff
          '"source" is invalid (data type)'Assert' '=1↑0⍴buff
          _source←buff
        ∇
    :EndProperty

    :Property path2config
    :Access Public Instance
        ∇ r←get
          r←_path2config,cfg_name
        ∇
    :EndProperty

    :Property fileTimestamp
    ⍝ Returns the file timestamp. Used to detect changes maed in one way or another.
    :Access Public Instance
        ∇ r←get
          r←_fileTimestamp
        ∇
    :EndProperty

    :Property registries
    :Access Public Instance
        ∇ r←get
          :If 0=≢_registries
              r←_registries
          :Else
              r←_registries[⍒_registries.priority]
          :EndIf
        ∇
    :EndProperty

    ∇ {r}←AddRegistry y;registry;name;alias;buff;reg
   ⍝ Adds the definition of a Registry (as a namespace) to the user settings.\\
   ⍝ If that Registry is already defined an error is thrown.\\
   ⍝ `⍵` must be one of:
   ⍝ * An instance of the "Registry" class.
   ⍝ * A text vector with a name or an alias+name in the format `[alias]name`\\
   ⍝   In this case `AddRegistry` creates an instance on the fly. Of course this means that this is
   ⍝   only suitable in case specifying just the name and optionally the alias is sufficient.
   ⍝ * A namespace that can be used to instanciate the `DefineRegistry` class.\\
   ⍝ `←` is always `⍬` (shy).
      :Access Public Instance
      r←⍬
      :If 80=⎕DR y
          :If ∧/'[]'∊y
              (alias name)←{⍵{('[]'~⍨⍵↑⍺)(⍵↓⍺)}⍵⍳']'}y
              alias←⎕C alias
          :Else
              name←y
              alias←''
          :EndIf
          ((name='\')/name)←'/'
          registry←⎕NEW home.DefineRegistry(,⊂name)
          registry.alias←⎕C alias
      :ElseIf ∨/'[DefineRegistry]'⍷⍕y
          registry←y
      :Else
          registry←⎕NEW home.DefineRegistry(,⊂y)
      :EndIf
      :If 0<≢_registries
          'This URI is already defined'Assert~(⊂registry.uri)∊_registries.uri
          :If 0<registry.⎕NC'alias'
          :AndIf 0<≢registry.alias
              'This alias is already used for a different uri'Assert~(⊂registry.alias)∊_registries.alias
          :EndIf
      :EndIf
      :If ∨/'[DefineRegistry]'⍷⍕registry
          buff←registry.Get ⍬
      :Else
          buff←registry
      :EndIf
      :If 0=buff.⎕NC'priority'
      :OrIf 0=buff.priority
          :If 0=≢_registries
              buff.priority←100
          :Else
              :If 0≥buff.priority←(⌊/_registries.priority~0)-10
              :AndIf 0≥buff.priority←⌈(⌊/_registries.priority~0)÷2
              :AndIf 0≥buff.priority←⌈(⌊/_registries.priority~0)-1     
                  ∘∘∘  ⍝TODO⍝ 
              :EndIf
          :EndIf
      :EndIf
      buff.uri←AddSlash buff.uri
      _registries,←buff
    ∇

    ∇ r←{rawFlag}ListRegistries showApiKey
    ⍝ List all data of all regsitries.\\
    ⍝ `showApiKey` must be a flag. If it 1 then the API key is shown, otherwise it is replace by "***"
    ⍝ With `rawflag` being 0 (the default) the result is beautified.
      :Access Public Instance
      rawFlag←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'rawFlag'
      '⍵ must be a Boolean'Assert(⊂rawFlag)∊0 1
      r←↑registries.(alias uri port priority api_key)
      :If (,1)≢,showApiKey
          r[;5]←⊂'***'          ⍝ Replace API key by Asterisks
      :EndIf
      :If ~rawFlag
          r←((,[0.5]'Alias' 'URI' 'Port' 'Priority' 'API-key'),[1]' ')⍪r
          r[2;]←(⌈⌿≢¨r)⍴¨'-'
      :EndIf
    ⍝Done
    ∇

    ∇ {r}←ReplaceRegistry registry;ind;reg
   ⍝ Replaces the definition of a Registry in the user settings.\\
   ⍝ If that Registry does not already exist an error is thrown.\\
   ⍝ Note that this function requires a URI since an alias is subject to change.\\
   ⍝ `⍵` must be an instance of the "Registry" class.\\
   ⍝ `←` is always `⍬` (shy).
      :Access Public Instance
      r←⍬
      :If 0=≢_registries
      :OrIf ~(⊂registry.uri)∊_registries.uri
          'There is no such registry yet'Assert 0
      :EndIf
      ind←_registries.uri⍳⊂registry.uri
      :If ∨/'[DefineRegistry]'⍷⍕registry
          _registries[ind]←registry.Get ⍬
      :Else
          reg←⎕NEW home.DefineRegistry(,⊂registry)
          _registries[ind]←reg.Get ⍬
      :EndIf
    ∇

    ∇ flag←Exist uriOrAlias
    ⍝ Checks whether `uriOrAlias` is defined as a Registry in the user settings.
      :Access Public Instance
      flag←∨/EqualsAliasOrName uriOrAlias
    ∇

    ∇ {r}←RemoveRegistry uriOrAlias;bool
    ⍝ Removes a Registry from the user settings.\\
    ⍝ `⍵` can be either a name or an alias.\\
    ⍝ `←` is 1 in case something was removed and 0 otherwise.
      :Access Public Instance
      :If 0=≢_registries
          r←0
      :Else
          'You MUST NOT delete the very last registry!'Assert 1<≢_registries
          :If 0=≢_registries
              r←0
          :Else
              :If ∨/~bool←~EqualsAliasOrName uriOrAlias
                  _registries←bool/_registries
              :EndIf
              r←∨/~bool
          :EndIf
      :EndIf
    ∇

    ∇ r←GetRegistry uriOrAlias;bool
    ⍝ Returns a Registry (as a namespace) or `⍬` in case the requested registry does not exist.
    ⍝ `⍵` can be either a name or an alias.\\
      :Access Public Instance
      'No Registry defined in the user settings'Assert 0<≢_registries
      :If 0=+/bool←EqualsAliasOrName uriOrAlias
          'uri/alias not found in user settings'Assert∨/bool
      :EndIf
      r←(bool⍳1)⊃_registries
    ∇

    ∇ r←Delete flag;filename;buff
    ⍝ Call this in order to delete the currently instanciated user settings file.\\
    ⍝ Returns 1 in case the file was successfully deleted otherwise (Blocked by another process, already deleted...)
      :Access Public Instance
      r←0
      :If flag
          filename←_path2config,cfg_name
      :AndIf F.IsFile filename
          r←F.DeleteFile filename
          (⊂'')F.NPUT(home.GetUserHomeFolder'.tatin')1
      :EndIf
    ∇

    ∇ {r}←Save flag;ns;tmp;del
      :Access Public Instance
      r←⍬
      :If flag
          ns←⎕NS''
          ns.registries←_registries
          ns.source←_source
          tmp←'tmp'F.GetTempFilename2 cfg_name
          {}(⊂home.Reg.JSON ns)F.NPUT tmp 1
          {}F.DeleteFile path2config
          {}path2config ⎕NMOVE tmp
          _fileTimestamp←GetFileTimestamp _path2config
      :EndIf
    ∇

    ∇ {r}←MakeDefaultFile flag;defaultFolder
      :Access Public Instance
      ⍝ Checks whether the current file is in a non-standard location. If that it the case it will create or overwrite
      ⍝ any file `.tatin` in the default folder, and add the path to the current user settings file to it.
      r←0
      :If flag
          defaultFolder←AddSlash home.GetUserHomeFolder''
      :AndIf ≢/F.NormalizePath _path2config defaultFolder  ⍝ Not in default folder?!
          (⊂_path2config)F.NPUT(defaultFolder,'.tatin')1
          r←1
      :EndIf
    ∇

⍝ ------------------- Private stuff

    Assert←{⍺←⊢ ⋄ 0∊⍵:⍺ ⎕SIGNAL 98 ⋄ shy←0}

    ∇ bool←EqualsAliasOrName y;alias;uri;msg
    ⍝ Returns a vector of booleans.\\
    ⍝ Interprets `⍵` as an alias in case is carries `[]` and as an URI otherwise.
      :If '['∊y
          alias←⎕C y~'[]'
          bool←alias∘≡¨_registries.alias
          msg←'Ambiguous alias'
      :Else
          uri←F.EnforceSlash y
          uri←AddSlash uri
          bool←(⊂uri)≡¨_registries.uri
          msg←'Ambiguous URL'
      :EndIf
      msg Assert(+/bool)∊0 1
    ∇

    ∇ {r}←Read dummy;ns
    ⍝ Reads the Client's config file
      r←⍬
      ns←⎕NS home.Reg.GetJsonFromFile path2config
      ns.registries.uri←{f←'\\'≡2⍴⍵ ⋄ AddSlash(f/'\\'),##.F.EnforceSlash(2×f)↓⍵}¨ns.registries.uri
      :If 0<≢ns.registries
          _registries←ns.registries[⍋ns.registries.priority]
      :Else
          _registries←0 2⍴''
      :EndIf
      _source←ns.source
      _fileTimestamp←GetFileTimestamp _path2config
    ∇

    ∇ r←GetFileTimestamp filename
      r←3 ⎕NINFO filename
    ∇

    ∇ {r}←CheckForUpdate dummy
      :If r←_fileTimestamp≢GetFileTimestamp _path2config
      :AndIf
          Read _path2config
      :EndIf
    ∇

    AddSlash←{⍵,(~(¯1↑⍵)∊'/\')/'/'}

    ∇ {r}←AddPrincipalServer dummy;buff;reg
      r←⍬
      buff←⎕NS''
      buff.alias←'tatin'
      buff.uri←'https://tatin.dev'
      reg←⎕NEW home.DefineRegistry(,⊂buff)
      AddRegistry reg
    ∇

:EndClass
