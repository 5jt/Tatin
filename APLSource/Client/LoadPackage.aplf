 r←{noBetas}LoadPackage(identifier targetSpace);paths;tempFolder;loaded
⍝ Load package `identifier` dynamically into the workspace,\\
⍝ `identifier` must be one of:
⍝ * An HTTP request for a package
⍝ * A ZIP file holding a package
⍝ * A folder holding a package (like file://C:/Temp/group-name-version)
⍝ * A path to a package in a registry (like [RegistryAlias]{packageID} or C:\MyReg\{packageID}')
⍝ * A package ID; Tatin will then attempt to find that package in one of the Registries defined in the
⍝   Client's config file.
⍝   The first hit wins.\\
⍝ `targetSpace` must be a reference or a fully qualified name of an ordinary namespace, meaning the name must
⍝ start with either `#.` or `⎕SE.`.\\
⍝ `targetSpace` might already exist, but if it doesn't it will be created. If it exists but is not an ordinary
⍝ namespace an error is thrown.\\
⍝ Loads the package into `[#|⎕SE]._tatin.{packageName}` and establishes a reference pointing to it in `targetSpace`\\
⍝ Loads all dependencies, if any, as well into [#|⎕SE]._tatin but _not_ into `targetSpace`.\\
⍝ Leaves no trails in the file system unless a package (or one of its dependencies) relies on file assets in
⍝ which case the temporary directory (which is created in any case) will not be deleted.\\
⍝ By default beta versions are considered in case the package ID is incomplete, but you can suppress them by passing 1 as ⍺.\\
⍝ Returns the name of the temp folder in case it could not be deleted (because of assets) and '' otherwise.
 r←''
 noBetas←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'noBetas'
 targetSpace←⍕targetSpace
 tempFolder←F.GetTempSubDir''
 CheckAlias identifier targetSpace
 paths←noBetas InstallPackage identifier tempFolder
 loaded←LoadDependencies tempFolder targetSpace
 :If 0=+/≢¨{6::'' ⋄ (Reg.JSON⊃F.NGET ⍵,'/',CFG_Name).assets}¨F.ListDirs tempFolder
     F.RmDir tempFolder
     :If 0<≢loaded
         loaded.code.TatinVars.⎕FX¨⊂⊂'r←HOME' 'r←⍬'
     :EndIf
 :ElseIf 0<≢loaded
     r←tempFolder
 :EndIf
⍝Done
