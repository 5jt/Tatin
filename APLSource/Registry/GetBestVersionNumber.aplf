 r←includeBetas GetBestVersionNumber path;id;pattern;list;buff;list2;level
⍝ Establishes the best version number for ⍵
⍝ '{group}-{name}-3.0.0' ← GetBestVersionNumber '{group}-{name}'
⍝ '{group}-{name}-2.1.0' ← GetBestVersionNumber '{group}-{name}-2'
⍝ '{group}-{name}-1.2.1' ← GetBestVersionNumber '{group}-{name}-1'
⍝ '{group}-{name}-1.1.9' ← GetBestVersionNumber '{group}-{name}-1.1'
⍝ Returns an empty vector in case nothing fits
 includeBetas←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'includeBetas'
 r←''
 id←(≢RemovePackageID path)↓path
 :If (~includeBetas)∧IsValidPackageID_Complete id
     :If F.IsDir path
         r←path
     :EndIf
 :Else
     :If IsValidPackageName id
         ⍝ We first need to establish the group:
         path←{⍵↓⍨-≢'/\'A.Last ⍵}path
         :If 0=≢buff←⊃F.ListDirs path,'*-',id
             :Return
         :EndIf
         id←({⍵↑⍨⍵⍳'-'}{⍵↑⍨1+-⌊/(⌽⍵)⍳'/\'}buff),id
         path,←id
     :EndIf
     level←⊃'-'+.=id
     :If level∊1 2
         pattern←path,'*'
     :EndIf
     :If 0<≢list←⊃F.Dir pattern
         :If 1=level
             list←('-'=(1+≢id)⊃¨F.CurrentSep A.Last¨list)/list
         :EndIf
         :If 0<≢list
             :If ~includeBetas
                 list←({3>⌈/+\'-'=⍵}¨'/\'∘A.Last¨list)/list   ⍝ Remove any betas versions
             :EndIf
             list2←InjectPublishingDate list              ⍝ Add publishing date where required
             list←list[SortIndexForPackageIDs list2]
         :EndIf
         r←⊃¯1↑list
         r←{1↓⍵/⍨2≤+\'-'=⍵}⊃,/1↓⎕NPARTS r
         :If IsValidPackageID_WithoutPatchNo id
             r←({⍵/⍨2>+\'-'=⍵}path),'-',r
         :ElseIf IsValidPackageID_WithMajorNo id
             r←({⍵/⍨2>+\'-'=⍵}path),'-',r
         :Else
             r←((-≢id)↓path),({⍵/⍨2>+\'-'=⍵}id),'-',r
         :EndIf
     :EndIf
 :EndIf
⍝Done
